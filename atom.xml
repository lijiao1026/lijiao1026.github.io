<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李骄的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-28T03:14:57.917Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>李骄</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java设计模式之单例模式</title>
    <link href="http://yoursite.com/2018/04/28/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/04/28/Java设计模式之单例模式/</id>
    <published>2018-04-28T01:29:55.000Z</published>
    <updated>2018-04-28T03:14:57.917Z</updated>
    
    <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>单例类只能有一个实例。</li><li>单例类必须自己创建自己的唯一实例。</li><li>单例类必须给所有其他对象提供这一实例。</li></ol><p>单例模式的写法有好几种，这里主要使用的是：懒汉式单例，饿汉式单例。</p><h4 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HugryManSingletoMode</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HugryManSingletoMode</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">"饿汉式单例"</span>);&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HugryManSingletoMode hugryManSingletoMode=<span class="keyword">new</span> HugryManSingletoMode();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HugryManSingletoMode <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hugryManSingletoMode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        HugryManSingletoMode.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中我们看到，类的构造函数定义为private的，保证其他类不能实例化此类，然后提供了一个静态实例并返回给调用者。饿汉模式是最简单的一种实现方式，饿汉模式在类加载的时候就对实例进行创建，实例在整个程序周期都存在。它的好处是只在类加载的时候创建一次实例，不会存在多个线程创建多个实例的情况，避免了多线程同步的问题。它的缺点也很明显，即使这个单例没有用到也会被创建，而且在类加载之后就被创建，内存就被浪费了。<br>这种实现方式适合单例占用内存比较小，在初始化时就会被用到的情况。但是，如果单例占用的内存比较大，或单例只是在某个特定场景下才会用到，使用饿汉模式就不合适了，这时候就需要用到懒汉模式进行延迟加载。</p><h4 id="懒汉式单例"><a href="#懒汉式单例" class="headerlink" title="懒汉式单例"></a>懒汉式单例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlackerSingletonMode</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SlackerSingletonMode</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">"懒汉式单例"</span>);&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SlackerSingletonMode slackerSingletonMode=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SlackerSingletonMode <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (slackerSingletonMode==<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            slackerSingletonMode=<span class="keyword">new</span> SlackerSingletonMode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slackerSingletonMode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SlackerSingletonMode通过将构造方法限定为private避免了类在外部被实例化，在同一个虚拟机范围内，SlackerSingletonMode的唯一实例只能通过getInstance()方法访问。但是以上懒汉式单例的实现没有考虑线程安全问题，它是线程不安全的，并发环境下很可能出现多个Singleton实例，要实现线程安全，有以下三种方式，都是对getInstance这个方法改造，保证了懒汉式单例的线程安全。  </p><ul><li>在getInstance方法上加同步<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlackerSingletonMode</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SlackerSingletonMode</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">"懒汉式单例"</span>);&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SlackerSingletonMode slackerSingletonMode=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SlackerSingletonMode <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (slackerSingletonMode==<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            slackerSingletonMode=<span class="keyword">new</span> SlackerSingletonMode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slackerSingletonMode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在方法上加synchronized同步锁或是用同步代码块对类加同步锁，此种方式虽然解决了多个实例对象问题，但是该方式运行效率却很低下，下一个线程想要获取对象，就必须等待上一个线程释放锁之后，才可以继续运行。volatile的一个语义是禁止指令重排序优化（。所谓指令重排优化是指在不改变原语义的情况下，通过调整指令的执行顺序让程序运行的更快。JVM中并没有规定编译器优化相关的内容，也就是说JVM可以自由的进行指令重排序的优化。），也就保证了instance变量被赋值的时候对象已经是初始化过的。</p><ul><li>双重检查锁定<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlackerSingletonMode</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SlackerSingletonMode</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">"懒汉式单例"</span>);&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SlackerSingletonMode slackerSingletonMode=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  SlackerSingletonMode <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (slackerSingletonMode==<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SlackerSingletonMode.class)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (slackerSingletonMode==<span class="keyword">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    slackerSingletonMode=<span class="keyword">new</span> SlackerSingletonMode();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slackerSingletonMode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>可以看到上面在同步代码块外多了一层instance为空的判断。由于单例对象只需要创建一次，如果后面再次调用getInstance()只需要直接返回单例对象。因此，大部分情况下，调用getInstance()都不会执行到同步代码块，从而提高了程序性能。不过还需要考虑一种情况，假如两个线程A、B，A执行了if (instance == null)语句，它会认为单例对象没有创建，此时线程切到B也执行了同样的语句，B也认为单例对象没有创建，然后两个线程依次执行同步代码块，并分别创建了一个单例对象。为了解决这个问题，还需要在同步代码块中增加if (instance == null)语句。使用双重检查进一步做了优化，可以避免整个方法被锁，只对需要锁的代码部分加锁，可以提高执行效率。</p><ul><li>静态内部类实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlackerSingletonMode</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SlackerSingletonMode</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">"懒汉式单例"</span>);&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerObjct</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span>  <span class="keyword">static</span> SlackerSingletonMode slackerSingletonMode=<span class="keyword">new</span> SlackerSingletonMode();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SlackerSingletonMode <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerObjct.slackerSingletonMode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这种方式同样利用了类加载机制来保证只创建一个instance实例。它与饿汉模式一样，也是利用了类加载机制，因此不存在多线程并发的问题。不一样的是，它是在内部类里面去创建对象实例。这样的话，只要应用中不使用内部类，JVM就不会去加载这个单例类，也就不会创建单例对象，从而实现懒汉式的延迟加载。也就是说这种方式可以同时保证延迟加载和线程安全。</p><h4 id="饿汉式和懒汉式区别"><a href="#饿汉式和懒汉式区别" class="headerlink" title="饿汉式和懒汉式区别"></a>饿汉式和懒汉式区别</h4><p>从名字上来说，饿汉和懒汉，饿汉就是类一旦加载，就把单例初始化完成，保证getInstance的时候，单例是已经存在的了，而懒汉比较懒，只有当调用getInstance的时候，才回去初始化这个单例。</p><ol><li>线程安全:<br>饿汉式天生就是线程安全的，可以直接用于多线程而不会出现问题，<br>懒汉式本身是非线程安全的，为了实现线程安全有几种写法，分别是上面的1、2、3，这三种实现在资源加载和性能方面有些区别。</li><li>资源加载和性能：<br>饿汉式在类创建的同时就实例化一个静态对象出来，不管之后会不会使用这个单例，都会占据一定的内存，但是相应的，在第一次调用时速度也会更快，因为其资源已经初始化完成，而懒汉式顾名思义，会延迟加载，在第一次使用该单例的时候才会实例化对象出来，第一次调用时要做初始化，如果要做的工作比较多，性能上会有些延迟，之后就和饿汉式一样了。至于1、2、3这三种实现又有些区别，第1种，在方法调用上加了同步，虽然线程安全了，但是每次都要同步，会影响性能，毕竟99%的情况下是不需要同步的，第2种，在getInstance中做了两次null检查，确保了只有第一次调用单例的时候才会做同步，这样也是线程安全的，同时避免了每次都同步的性能损耗。第3种，利用了classloader的机制来保证初始化instance时只有一个线程，所以也是线程安全的，同时没有性能损耗，所以一般我倾向于使用这一种。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;p&gt;单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java设计模式之工厂模式（简单工厂模式+工厂方法模式+抽象工厂模式）</title>
    <link href="http://yoursite.com/2018/04/25/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%88%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/25/Java设计模式之工厂模式（简单工厂模式-工厂方法模式-抽象工厂模式）/</id>
    <published>2018-04-25T07:48:07.000Z</published>
    <updated>2018-04-28T01:15:00.733Z</updated>
    
    <content type="html"><![CDATA[<p>在面向对象编程中, 最通常的方法是一个new操作符产生一个对象实例,new操作符就是用来构造对象实例的。但是在一些情况下, new操作符直接生成对象会带来一些问题。举例来说, 许多类型对象的创造需要一系列的步骤: 你可能需要计算或取得对象的初始设置; 选择生成哪个子对象实例; 或在生成你需要的对象之前必须先生成一些辅助功能的对象。 在这些情况,新对象的建立就是一个 “过程”，不仅是一个操作，像一部大机器中的一个齿轮传动。<br><strong>解决方案：建立一个工厂来创建对象</strong></p><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><ol><li>在很早以前还没有肯德基快餐，人们想吃汉堡需要自己动手制作，然后自己才可以吃到汉堡。</li><li>简单工厂模式：后来出现了肯德基。人们不需要自己去制作汉堡，因为只需要去肯德基就可以吃到美味的汉堡。</li><li>工厂方法模式时代：为了满足不同客户口味的不同，肯德基退出的汉堡种类越来越多，有劲爆鸡腿汉堡，巨无霸汉堡，深海鳕鱼汉堡等等。每个门点会有自己主打的汉堡品牌，即每个门店有自己的特色汉堡，我们可以去相应的门店迟到自己心仪的汉堡。</li><li>抽象工厂模式时代：随着客户的口味要求越来越高，汉堡还会搭配各种小食，于是各个门店又推出了不同的小食搭配。<br><strong>最终是客户只要对肯德基的的销售员说：我要鸡腿堡套餐，销售员就直接给他鸡腿堡加薯条和可乐。而不用自己去烹饪。</strong><br><strong>这就是工厂模式。</strong></li></ol><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>工厂模式可以分为3类，分别为简单工厂模式（Simple Factory），工厂方法模式（Factory Method），抽象工厂模式（Abstract Factory），这三种模式逐步抽象，并且更具一般性。可以简单工厂模式（Simple Factory）看为工厂方法模式的一种特例，两者归为一类。</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>工厂方法模式：<br>一个抽象产品类，可以派生出多个具体产品类。<br>一个抽象工厂类，可以派生出多个具体工厂类。<br>每个具体工厂类只能创建一个具体产品类的实例。<br>抽象工厂模式：<br>多个抽象产品类，每个抽象产品类可以派生出多个具体产品类。<br>一个抽象工厂类，可以派生出多个具体工厂类。<br>每个具体工厂类可以创建多个具体产品类的实例。<br>区别：<br>工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。<br>工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个。两者皆可。</p><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><p>客户想吃汉堡，客户和汉堡就紧密耦合在一起，为了降低耦合，就出现了工厂类，把烹饪汉堡的操作细节都放进了工厂里面去，客户直接使用工厂的创建方法，传入想要吃的汉堡类型就可以，这就是简单工厂模式。  </p><ul><li>产品类:  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanburger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hanburger</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChickenBurger</span> <span class="keyword">extends</span> <span class="title">Hanburger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">ChickenBurger</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"烹饪鸡腿汉堡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodHamburger</span> <span class="keyword">extends</span> <span class="title">Hanburger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">CodHamburger</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"烹饪鳕鱼汉堡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>工厂类:  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hanburger <span class="title">createHanburger</span><span class="params">(<span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ChickenBurger();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> CodHamburger();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>客户类:  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       Factory factory=<span class="keyword">new</span> Factory();</span><br><span class="line">       Hanburger chickenBurger=factory.createHanburger(<span class="number">1</span>);</span><br><span class="line">       Hanburger codHamburger=factory.createHanburger(<span class="number">2</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单工厂模式又称静态工厂方法模式。从命名上就可以看出这个模式很简单。他的目的就是:定义一个用于创建对象的接口。<br>先来看看他的组成:  </p><ol><li>工厂类角色:这是本模式的核心，含有一定的商业逻辑和判断逻辑，用来创建产品。</li><li>抽象产品角色:他一般是具体产品继承的父类或者实现的接口。</li><li>具体产品角色：工厂类所创建的对象就是此角色的实例。在java中由一个具体类实现。  </li></ol><p>从开闭原则（对扩展开发；对修改封闭）上来分析下简单工厂模式。当客户不满足现有的汉堡种类，想吃别的类型的汉堡，只要这种汉堡符合抽象产品的制定合同，那么只要通知工厂类就可以制造出来。所以对产品部分来说，他是符合开闭原则的；但是工厂部分好像不太理想，因为每增加一种汉堡，都要在工厂类中增加相应的创建业务逻辑即要新增case方法，这显然是违背开闭原则的。可想而知对于新产品的引入，工厂是非常被动的，对于这样的工厂类，我们称它为全能类或者上帝类。<br><strong>于是工厂方法模式出现了，他把工厂类定义成了接口，而新增的汉堡种类，就增加该种类的对应的工厂类的实现，这样工厂的设计就可以扩展了，而不必去修改原来的代码。</strong></p><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><p>工厂方法模式去掉了简单工厂模式中工厂方法的静态属性，使得他可以被子类继承。这样在简单工厂模式里集中在工厂方法上的压力可以由工厂方法模式里不同的工厂子类来分担。<br>工厂方法模式组成：</p><ol><li>抽象工厂角色：这是工厂方法模式的核心，他与应用程序无关，是具体工厂角色必须实现的接口或者必须继承的父类。在java中他由抽象类或者接口来实现。</li><li>具体工厂角色：他含有和具体业务逻辑有关的代码。由应用程序调用以创建对于的具体产品的对象。</li><li>抽象产品角色：他是具体产品继承的父类或者实现的接口。在java中一般有抽象类或者接口来实现。</li><li>具体产品角色：具体工厂角色所创建的对象就是此角色的实例。在java中由具体的类来实现。  </li></ol><p>工厂方法模式使用继承自抽象工厂角色的多个子类来代替简单工厂模式中的“上帝类”。正如上面所说，这样便分担了对象承受的压力；而且这样使得结构变得灵活 起来——当有新的产品产生时，只要按照抽象产品角色、抽象工厂角色提供的合同来生成，那么就可以被客户使用，而不必去修改任何已有 的代码。可以看出工厂角色的结构也是符合开闭原则的！ 代码只改动了工厂类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FactoryHanburger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function">Hanburger <span class="title">createHanburger</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryChickenBurger</span> <span class="keyword">implements</span> <span class="title">FactoryHanburger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChickenBurger <span class="title">createHanburger</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChickenBurger();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryCodHamburger</span> <span class="keyword">implements</span> <span class="title">FactoryHanburger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CodHamburger <span class="title">createHanburger</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CodHamburger();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="comment">/*Factory factory=new Factory();</span></span><br><span class="line"><span class="comment">      Hanburger chickenBurger=factory.createHanburger(1);</span></span><br><span class="line"><span class="comment">      Hanburger codHamburger=factory.createHanburger(2); */</span></span><br><span class="line">      FactoryChickenBurger factoryChickenBurger=<span class="keyword">new</span> FactoryChickenBurger();</span><br><span class="line">      ChickenBurger chickenBurger=factoryChickenBurger.createHanburger();</span><br><span class="line">      FactoryCodHamburger factoryCodHamburger=<span class="keyword">new</span> FactoryCodHamburger();</span><br><span class="line">      CodHamburger codHamburger=factoryCodHamburger.createHanburger();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p> 工厂方法模式仿佛已经很完美的对对象的创建进行了包装，使得客户程序中仅仅处理抽象产品角色提供的接口，但使得对象的数量成倍增长。当产品种类非常多时，会出现大量的与之对应的工厂对象，这不是我们所希望的。</p><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p> 随着客户的要求越来越高，可能不简单会点汉堡一样食品，而是希望有一些经济的套餐，搭配上小食，饮料这样。于是便出现了鸡腿堡套餐（鸡腿汉堡+薯条+可乐），鳕鱼套餐（鳕鱼汉堡+鸡块+咖啡）。这就需要用到抽象工厂模式。抽象工厂模式是工厂方法模式的升级版本，他用来创建一组相关或者相互依赖的对象。<br> 当每个抽象产品都有多于一个的具体子类的时候（小食有薯条和鸡块两种，饮料也有可乐和咖啡两种），工厂角色怎么知道实例化哪一个子类呢？比如每个抽象产品角色都有两个具体产品。抽象工厂模式提供两个具体工厂角色，分别对应于这两个具体产品角色，每一个具体工厂角色只负责某一个产品角色的实例化。每一个具体工厂类只负责创建抽象产品的某一个具体子类的实例。</p><ul><li>产品类  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Drinks</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDrinks</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">implements</span> <span class="title">Drinks</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDrinks</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       System.err.println(<span class="string">"制造咖啡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cola</span> <span class="keyword">implements</span> <span class="title">Drinks</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDrinks</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"制造可乐"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Snack</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSnack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fries</span> <span class="keyword">implements</span> <span class="title">Snack</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSnack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"烹饪薯条"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChickenNugget</span> <span class="keyword">implements</span> <span class="title">Snack</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSnack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"烹饪鸡块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>工厂类：  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSnack</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDrinks</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChickBurgerSetMeal</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSnack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Fries().createSnack();;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDrinks</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Cola().createDrinks();;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodHamburgerSetMeal</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSnack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">new</span> ChickenNugget().createSnack();;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDrinks</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Coffee().createDrinks();;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>客户类：  </li></ul><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span><span class="class"></span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><span class="function">    </span>{        <span class="comment">//鸡腿堡套餐</span>        ChickBurgerSetMeal chickBurgerSetMeal=<span class="keyword">new</span> ChickBurgerSetMeal();        chickBurgerSetMeal.createSnack();        chickBurgerSetMeal.createDrinks();        <span class="comment">//鳕鱼套餐</span>        CodHamburgerSetMeal codHamburgerSetMeal=<span class="keyword">new</span> CodHamburgerSetMeal();        codHamburgerSetMeal.createSnack();        codHamburgerSetMeal.createDrinks();    }}</code></pre><h4 id="抽象工厂模式的优缺点"><a href="#抽象工厂模式的优缺点" class="headerlink" title="抽象工厂模式的优缺点"></a>抽象工厂模式的优缺点</h4><ol><li><p>优点：封装性。每个产品的实现类不是高层模块要关心的，它要关心的是接口，是抽象，它不关心对象是如何创建出来的，这都由工厂类负责的，只要知道工厂类是谁，我就能创建一个需要的对象，省时省力。产品族内的约束为非公开状态。例如生产男女比例的问题上，猜想女娲娘娘肯定有自己的打算，那么在抽象工厂模式中，这些约束都在工厂内里面实现的。</p></li><li><p>缺点: 抽象工厂模式最大的缺点就是产品族扩展非常困难。如果我们要增加一个产品C，也就是说产品族由原来的A和B增加到3个，然后两个实现类都要修改……说到这里，已经知道了扩展的弊端了……注意这里是产品族扩展比较困难，而不是产品等级扩展困难。产品等级扩展还是非常容易的，增加一个产品等级，只要增加一个工厂类负责新增加出来的产品生产任务即可。也就是说横向扩展容易，纵向扩展难。即增加套餐种类容易，增加每种套餐的部件内容难。  </p></li></ol><p><strong>代码在github，地址为</strong><a href="https://github.com/lijiao1026/DesignPatterns" target="_blank" rel="noopener">https://github.com/lijiao1026/DesignPatterns</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在面向对象编程中, 最通常的方法是一个new操作符产生一个对象实例,new操作符就是用来构造对象实例的。但是在一些情况下, new操作符直接生成对象会带来一些问题。举例来说, 许多类型对象的创造需要一系列的步骤: 你可能需要计算或取得对象的初始设置; 选择生成哪个子对象实例
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java的23种设计模式</title>
    <link href="http://yoursite.com/2018/04/25/java%E7%9A%8423%E4%B8%AD%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/04/25/java的23中设计模式/</id>
    <published>2018-04-25T01:44:48.000Z</published>
    <updated>2018-04-25T06:38:30.530Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JAVA的设计模式分为3大类"><a href="#JAVA的设计模式分为3大类" class="headerlink" title="JAVA的设计模式分为3大类"></a>JAVA的设计模式分为3大类</h3><ul><li>创建型模式（5种）:工厂方法模式，抽象工厂模式，单例模式，建造者模式，原型模式。</li><li>结构型模式（7种）：适配器模式，装饰器模式，代理模式，外观模式，桥接模式，组合模式，享元模式。</li><li>行为型模式（11种）：策略模式，模板方法模式，观察者模式，迭代子模式，责任链模式，命令模式，备忘录模式，状态模式，访问者模式，中介者模式，解释器模式。</li></ul><h3 id="设计模式的6大原则"><a href="#设计模式的6大原则" class="headerlink" title="设计模式的6大原则"></a>设计模式的6大原则</h3><ol><li>开闭原则（Open Close Principle）<br>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果经常使用接口和抽象类。</li><li>里氏代换原则（Liskov Substitution Principle）<br>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。  </li><li>依赖倒转原则（Dependence Inversion Principle）<br>这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。</li><li>接口隔离原则（Interface Segregation Principle）<br>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</li><li>迪米特法则（最少知道原则）（Demeter Principle）<br>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</li><li>合成复用原则（Composite Reuse Principle）<br>原则是尽量使用合成/聚合的方式，而不是使用继承。继承实际上破坏了类的封装性，超类的方法可能会被子类修改。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JAVA的设计模式分为3大类&quot;&gt;&lt;a href=&quot;#JAVA的设计模式分为3大类&quot; class=&quot;headerlink&quot; title=&quot;JAVA的设计模式分为3大类&quot;&gt;&lt;/a&gt;JAVA的设计模式分为3大类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;创建型模式（5种）:工厂方法模式
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小知识点整理记录</title>
    <link href="http://yoursite.com/2018/04/11/%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/04/11/小知识点整理记录/</id>
    <published>2018-04-11T06:04:57.000Z</published>
    <updated>2018-04-16T12:09:00.181Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入我的生日</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      这是面试中遇到的自己不会的问题的答案
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Centos7安装oracle</title>
    <link href="http://yoursite.com/2018/03/19/Centos7%E5%AE%89%E8%A3%85oracle/"/>
    <id>http://yoursite.com/2018/03/19/Centos7安装oracle/</id>
    <published>2018-03-19T05:29:03.000Z</published>
    <updated>2018-04-03T07:29:50.594Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章介绍完了如何从零开始到安装好所有环境，但是数据库用的是oracle的话安装比较繁琐，所以另开一篇。</p><h1 id="系统准备"><a href="#系统准备" class="headerlink" title="系统准备"></a>系统准备</h1><p>oracle分我64位和32位的，本次使用的是64为的安装包，前往oracle官网即可下载到，分别为linux.x64_11gR2_database_1of2和linux.x64_11gR2_database_2of2。做完这些之后如果没有关闭防火墙和配置好固定ip请先看前面文章配置。  </p><h1 id="用户和环境准备"><a href="#用户和环境准备" class="headerlink" title="用户和环境准备"></a>用户和环境准备</h1><ol><li><p>安装依赖包，执行命令:yum -y install gcc gcc-c++ make binutilscompat-libstdc++-33 elfutils-libelf elfutillibelf-devel glibc glibcommonglibc-devel libaio libaio-devel libgcclibstdc++ libstdc++-devel unixODBC unixODBC-devel </p></li><li><p>创建用户和组。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# sysctl -p</span><br><span class="line">[root@localhost ~]# groupadd -g 200 oinstall</span><br><span class="line">[root@localhost ~]# groupadd -g 201 dba</span><br><span class="line">[root@localhost ~]# useradd -u 440 -g oinstall -G dba oracle</span><br><span class="line">[root@localhost ~]# passwd oracle</span><br></pre></td></tr></table></figure></li><li><p>修改内核参数。执行命令:<code>vim /etc/sysctl.conf</code>，在末尾添加如下信息。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_local_port_range= 9000 65500</span><br><span class="line">fs.file-max = 6815744 </span><br><span class="line">kernel.shmall = 10523004</span><br><span class="line">kernel.shmmax = 6465333657</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100128</span><br><span class="line">net.core.rmem_default=262144</span><br><span class="line">net.core.wmem_default=262144</span><br><span class="line">net.core.rmem_max=4194304</span><br><span class="line">net.core.wmem_max=1048576</span><br><span class="line">fs.aio-max-nr = 1048576</span><br></pre></td></tr></table></figure></li><li><p>修改系统资源限制。执行命令: <code>vim /etc/security/limits.conf</code> ，末尾添加如下:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oracle soft nproc 2047 </span><br><span class="line">oracle hard nproc 16384</span><br><span class="line">oracle soft nofile 1024 </span><br><span class="line">oracle hard nofile 655</span><br></pre></td></tr></table></figure></li><li><p>在执行命令:<code>vi/etc/pam.d/login</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session required pam_namespace.so #下面添加一条pam_limits.so </span><br><span class="line">session required pam_limits.so</span><br></pre></td></tr></table></figure></li><li><p>在执行命令:<code>vi/etc/profile</code> 添加如下  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$USER</span> =<span class="string">"oracle"</span> ]; <span class="keyword">then</span></span><br><span class="line"> <span class="keyword">if</span> [ <span class="variable">$SHELL</span> = <span class="string">"/bin/ksh"</span> ];<span class="keyword">then</span></span><br><span class="line"> <span class="built_in">ulimit</span> -p 16384</span><br><span class="line"> <span class="built_in">ulimit</span> -n 65536</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">ulimit</span> -u 16384 -n 65536</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li><p>创建安装目录及设置权限，命令行输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# mkdir /opt/oracle</span><br><span class="line">[root@localhost opt]# mkdir /opt/oracle/app</span><br><span class="line">[root@localhost opt]# mkdir /opt/oracle/oradata</span><br><span class="line">[root@localhost opt]# chmod 755 /opt/oracle</span><br><span class="line">[root@localhost opt]# chmod 755 /opt/oracle/app</span><br><span class="line">[root@localhost opt]# chown oracle.oinstall -R /opt/oracle</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量。先切换到oracle用户，执行命令<code>su oracle</code>,然后执行命令<code>vi ~/.bash_profile</code>,加入如下内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export ORACLE_BASE=/opt/oracle/app</span><br><span class="line">export ORACLE_HOME=$ORACLE_BASE/product/11.2.0/dbhome_1</span><br><span class="line">export PATH=$PATH:$ORACLE_HOME/bin</span><br><span class="line">export ORACLE_SID=orcl</span><br><span class="line">export ORACLE_PID=orcl</span><br></pre></td></tr></table></figure></li><li><p>再执行命令:<code>source .bash_profile</code>立即生效。如果提示没有权限的话，使用sudo执行。</p></li><li>将已经下载好的两个oracle压缩文件复制到/media文件夹里面。然后解压文件，执行命令:<code>unzip /media/linux.x64_11gR2_database_1of2.zip</code>和<code>unzip /media/linux.x64_11gR2_database_2of2.zip</code>，解压完后执行命令<code>xhost +</code>开启图形化桌面，如果不能执行，就先执行命令:<code>export DISPLAL=:0</code>再执行刚才的命令。  </li><li>切换到oracle用户，<code>su oracle</code>，然后切换到/media/database目录下，先执行<code>export LANG=EN</code>切换为安装的时候英文,执行<code>./runInstall</code>  </li></ol><h1 id="图形化界面安装"><a href="#图形化界面安装" class="headerlink" title="图形化界面安装"></a>图形化界面安装</h1><ol><li>不要输入email，直接next<br><img src="/images/Oracle/oracle1.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>选择安装数据库软件并创建数据，也可以选择第二项仅安装数据库软件，然后next。<br><img src="/images/Oracle/oracle2.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>选择服务器版本，如图，点击next。<br><img src="/images/Oracle/oracle3.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>单例数据库，如图，点击next。<br><img src="/images/Oracle/oracle4.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>高级模式安装，如图，点击next。<br><img src="/images/Oracle/oracle5.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>添加支持语言，如图，点击next。<br><img src="/images/Oracle/oracle6.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>选择要安装的版本，如图，点击next。<br><img src="/images/Oracle/oracle7.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>安装数据库目录，如图，点击next。<br><img src="/images/Oracle/oracle8.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>创建详细目录。<br><img src="/images/Oracle/oracle9.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>选择配置类型。<br><img src="/images/Oracle/oracle10.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>数据库与服务名。<br><img src="/images/Oracle/oracle11.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>开启自动内存管理（如果512m太大，会出现提示，减少一些就可以），然后先不要点击next，而是点击Memory旁边的Charactor sets选项。<br><img src="/images/Oracle/oracle12.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>设置默认编码为UTF-8。<br><img src="/images/Oracle/oracle13.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>启用oracle企业管理控制台OEM。<br><img src="/images/Oracle/oracle14.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>选择数据库文件目录。<br><img src="/images/Oracle/oracle15.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>自动备份。<br><img src="/images/Oracle/oracle16.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>设置数据库用户名和密码，他是有一个密码建议的，否则会提示错误，密码建议是包含大写和小写字母，总长度不能低于8位。<br><img src="/images/Oracle/oracle17.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>授权的组。<br><img src="/images/Oracle/oracle18.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>检查oracle一些安装要求，包都已经安装，直接忽略。<br><img src="/images/Oracle/oracle19.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>开始安装。<br><img src="/images/Oracle/oracle20.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li><p>安装完成后，会出来一个对话框，提示使用root用户执行这两个脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ /opt/oracle/oraInventory/orainstRoot.sh</span><br><span class="line">[root@localhost ~]$ /opt/oracle/app/product/11.2.0/dbhome_1/root.</span><br></pre></td></tr></table></figure></li><li><p>启动数据库。执行命令如下，如果没有配置好环境变量，将会无法启动！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@oracledb ~]# su –oracle</span><br><span class="line">[oracle@oracledb ~]# lsnrctl start</span><br><span class="line">[oracle@oracledb ~]# sqlplus / as sys</span><br></pre></td></tr></table></figure></li><li><p>设置oracle开机启动。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.键入命令“vi /etc/oratab”（使用vi编辑器编辑文件/etc/oratab）</span><br><span class="line">2.进入vi编辑器后，找到“orcl:/opt/oracle/app/product/11.2.0/dbhome_1:N”，改为“orcl:/opt/oracle/app/product/11.2.0/dbhome_1:Y”。修改完成后，保存退出vi。</span><br><span class="line">3.键入命令 vi /etc/rc.d/rc.local</span><br><span class="line">4.在vi编辑器中，添加：</span><br><span class="line">su oracle -lc &quot;/opt/oracle/app/product/11.2.0/dbhome_1/bin/lsnrctl start&quot;</span><br><span class="line">su oracle -lc /opt/oracle/app/product/11.2.0/dbhome_1/bin/dbstart</span><br><span class="line">5.保存并退出vi。</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上篇文章介绍完了如何从零开始到安装好所有环境，但是数据库用的是oracle的话安装比较繁琐，所以另开一篇。&lt;/p&gt;
&lt;h1 id=&quot;系统准备&quot;&gt;&lt;a href=&quot;#系统准备&quot; class=&quot;headerlink&quot; title=&quot;系统准备&quot;&gt;&lt;/a&gt;系统准备&lt;/h1&gt;&lt;p&gt;o
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux从零到成功部署项目</title>
    <link href="http://yoursite.com/2018/03/19/Linux%E4%BB%8E%E9%9B%B6%E5%88%B0%E6%88%90%E5%8A%9F%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2018/03/19/Linux从零到成功部署项目/</id>
    <published>2018-03-19T01:20:21.000Z</published>
    <updated>2018-03-20T01:16:42.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>上篇文章写完了如何将新机安装成linux7.4系统，这篇将写完禁用防火墙，开启SSH服务，开启VNC服务，安装JDK，安装TOMCAT。  </p><h1 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h1><ol><li>查看 SELinux 状态：/usr/sbin/sestatus -v<br><img src="/images/CentosAfterImage/SelinuxState.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li><p>临时关闭（不用重启机器）:这种方法重启后就失效，而且关闭后很多服务还是没法使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# setenforce 0 #设置 SELinux 成为 permissive 模式 </span><br><span class="line">[root@localhost ~]# setenforce 1 #设置 SELinux 成为 enforcing 模式</span><br></pre></td></tr></table></figure></li><li><p>永久关闭:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/selinux/conf</span><br></pre></td></tr></table></figure></li><li><p>将 SELINUX=enforcing 改为 SELINUX=disable,（按键盘字母 a，启用编辑，修改后按 esc，输入“：wq”，表示保存修改）如图，然后重启机器，执行命令reboot。<br><img src="/images/CentosAfterImage/CloseSelinux.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </p></li><li>Firewalld关闭，输入命令:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl stop firewalld.service 关闭防火墙</span><br><span class="line">[root@localhost ~]# systemctl disable firewalld.service 禁止防火墙开机启动</span><br></pre></td></tr></table></figure></li></ol><h1 id="SSH服务"><a href="#SSH服务" class="headerlink" title="SSH服务"></a>SSH服务</h1><ol><li><p>输入命令，查看SSH服务是否安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rpm -qa | grep ssh</span><br></pre></td></tr></table></figure></li><li><p>如果出现如图所示，就说明已经安装了SSH服务。<br><img src="/images/CentosAfterImage/SSHDownload.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </p></li><li>如果没有的话，执行命令yum install openssh-server 安装。  </li><li>启动SSH服务，执行命令:service sshd restart 重启 SSH 服务,出现如下：Redirecting to /bin/systemctl restart sshd.service。注：命令：service sshd start 启动服务 | 命令：service sshd stop 停止服务重启后可输入：netstat -antp | grep sshd 查看是否启动 22 端口。</li><li>设置开机自启动。输入命令：chkconfig sshd on。注：若是 chkconfig sshd off 则禁止 SSH 开机启动。  </li></ol><h1 id="安装lrzsz上传下载程序"><a href="#安装lrzsz上传下载程序" class="headerlink" title="安装lrzsz上传下载程序"></a>安装lrzsz上传下载程序</h1><ol><li><p>检查是否安装lrzsz,输入命令rpm -qa |grep lrzsz<br><img src="/images/CentosAfterImage/lrzszDownload.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>显示已经系统自带这款软件。假如没有安装，则输入命令安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum install -y lrzsz</span><br></pre></td></tr></table></figure></li><li><p>上传，从 Windows 上传文件，上传命令为 rz；在 Linux 命令行下输入 rz，上传的文件在当前命令行的目录下。  </p></li><li>下载。<code>[root@localhost ~]# sz 文件名</code>  </li></ol><h1 id="VNC远程服务"><a href="#VNC远程服务" class="headerlink" title="VNC远程服务"></a>VNC远程服务</h1><ol><li><p>检查 VNC 远程包是否安装，输入命令:<code>[root@localhost ~]# rpm -q tigervnctigervnc-server</code>出现如下提示：<br><code>未安装软件包 tigervnctigervnc-server</code><br>再输入：<code>[root@localhost ~]# rpm -qa |grep vnc</code>出现如下提示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tigervnc-license-1.8.0-1.el7.noarch</span><br><span class="line">tigervnc-server-minimal-1.8.0-1.el7.x86_64</span><br><span class="line">gvnc-0.7.0-2.el7.x86_64</span><br><span class="line">gtk-vnc2-0.7.0-2.el7.x86</span><br></pre></td></tr></table></figure></li><li><p>提示中看出发现少一个 tigervnc-server 安装包没有安装，执行命令<code>[root@localhost ~]# yum install –y tigervnc tigervnc-server</code>遇到询问都输入 y，然后回车。直至安装完成。  </p></li><li>启用vncserver服务，<code>[root@localhost ~]# vncserver</code>,会跳出提示要求你设置密码，自己输入密码就行。设置好后就能尝试登陆，VNC 默认端口是 5901  </li><li>开启VNC，尝试登录。<br><img src="/images/CentosAfterImage/VNCServer.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>另外 VNC 设置开机自启动，无论实在 centos6.7 版本或者 7.4 版本都不成功，所以每次都是设置 ssh 自启动后，链接 ssh 然后输入命令：<code>[root@localhost bin]# vncserver</code>  </li></ol><h1 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h1><ol><li>查看软件包，输入命令:<code>[root@localhost network-scripts]# rpm -qa | grep java</code><br><img src="/images/CentosAfterImage/JAVAPackage.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>一般 centos 都会默认安装 jdk，但我们这里要使用自己的 jdk，所以卸载掉系统自带的 jdk。输入卸载命令:<br><img src="/images/CentosAfterImage/UninstallJava.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>卸载完成后再次输入:<code>[root@localhost network-scripts]# rpm -qa | grep java</code>查看是否还存在java软件包。  </li><li>安装JDK<br>上传新的 jdk-7-linux-x64.rpm 软件到/usr/local/执行以下操作:<br><code>[root@localhost local]# rpm -ivh jdk-7u79-linux-x64.rpm</code>,进行 rpm 安装包的安装。<br><img src="/images/CentosAfterImage/JAVAInstall.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>输入java -version，查看版本。<br><img src="/images/CentosAfterImage/JAVAVersion.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li></ol><h1 id="安装TOMCAT"><a href="#安装TOMCAT" class="headerlink" title="安装TOMCAT"></a>安装TOMCAT</h1><ol><li><p>上传安装包。将 apache-tomcat-7.0.73.tar.gz 文件上传到/usr/local 。执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# tar -zxv -f apache-tomcat-7.0.73.tar.gz // 解压压缩包 </span><br><span class="line">[root@localhost local]#rm -rf apache-tomcat-7.0.73.tar.gz // 删除压缩包 </span><br><span class="line">[root@localhost local]# mv apache-tomcat-7.0.73 tomcat //修改</span><br></pre></td></tr></table></figure></li><li><p>进入 tomcat/bin 目录，输入命令，开启 tomcat。<code>[root@localhost bin]# ./startup.sh</code>然后打开浏览器，访问 <a href="http://IP" target="_blank" rel="noopener">http://IP</a> 地址:端口号（默认 8080),出现 tomcat 主页面既表示安装成功。<br><img src="/images/CentosAfterImage/TOMCATStartup.jpg" width="600px" height="500px" alt="图片飞到火星去了"> </p></li><li>关闭 tomcat 命令则进入/tomcat/bin 目录，输入:<code>./shutdown.sh</code></li><li>修改tomcat内存配置。先关闭tomcat，修改内存大小：打开 tomcat/bin/catalina.sh找到 cygwin=false，在上面添加:<br><code>export JAVA_OPTS=&quot;-Xms1024m -Xmx1024m -XX:PermSize=128m -XX:MaxPermSize=256m&quot;</code><br><img src="/images/CentosAfterImage/JAVAJVM.jpg" width="600px" height="500px" alt="图片飞到火星去了"></li><li>注：-Xms128m JVM 初始分配的堆内<br>-Xmx512m JVM 最大允许分配的堆内存，按需分配<br>-XX:PermSize=64M JVM 初始分配的非堆内存<br>-XX:MaxPermSize=128M JVM 最大允许分配的非堆内存，按需分配  </li><li>修改tomcat字符集，tomcat 下的 conf 文件夹，打开 server.xml 文件,找到如下内容：  <pre><code>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot;/&gt;</code></pre>在 redirectPort=”8443”后面加上 URIEncoding=”utf-8”。<br><img src="/images/CentosAfterImage/TOMCATUtf8.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>配置tomcat开机启动，打开/etc/rc.d/rc.local 键入： /usr/local/tomcat/bin/startup.sh。<br><img src="/images/CentosAfterImage/TOMCATStart.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>保存并且退出。打开 tomcat 服务，重启电脑，尝试访问 tomcat 服务器。这时候发现曾经在 centos6.7 可以开机自启动 tomcat，在 centos7.4居然就不行。这是因为rc.local没有执行权限，执行命令<code>chmod +x /etc/rc.d/rc.local</code>重启后发现可以了。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h1&gt;&lt;p&gt;上篇文章写完了如何将新机安装成linux7.4系统，这篇将写完禁用防火墙，开启SSH服务，开启VNC服务，安装JDK，安装TOMCAT。  
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux安装Centos7.0</title>
    <link href="http://yoursite.com/2018/03/16/Linux%E5%AE%89%E8%A3%85Centous7-0/"/>
    <id>http://yoursite.com/2018/03/16/Linux安装Centous7-0/</id>
    <published>2018-03-16T05:28:11.000Z</published>
    <updated>2018-03-16T07:24:48.751Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备系统"><a href="#准备系统" class="headerlink" title="准备系统"></a>准备系统</h1><ol><li>准备一个8G以上的U盘  </li><li>访问：<a href="https://www.centos.or" target="_blank" rel="noopener">https://www.centos.or</a><br><img src="/images/CentosImage/CentosWeb.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>点击 Get Centos Now,跳出页面后选择DVD ISO<br><img src="/images/CentosImage/CentosDVD.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>从 Actual Country 中选择镜像网址下载:一般选择：<a href="http://centos.ustc.edu.cn/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1708.iso" target="_blank" rel="noopener">http://centos.ustc.edu.cn/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1708.iso</a>  </li><li>下载软件：USBWriter，网址<a href="https://sourceforge.net/projects/usbwrite" target="_blank" rel="noopener">https://sourceforge.net/projects/usbwrite</a> 下载完后打开软件，将 Centos 制作成 U 盘启动盘<br><img src="/images/CentosImage/CentosUsbWriter.jpg" width="600px" height="500px" alt="图片飞到火星去了">  <h1 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h1></li><li>更改 bios 启动顺序，开机后一直按F12或者F10，即可进入bios界面（即 U 盘先启动）  </li><li>进入安装界面<br><img src="/images/CentosImage/CentosLogin.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>界面说明：Install CentOS 7安装 CentOS 7（选择此项进入安装）<br>Test this media &amp; install CentOS 7 测试安装文件并安装<br>CentOS 7Troubleshooting 修复  </li><li>进入后进入安装语言选择界面:选择中文，这个默认指的是安装时候语言而不是系统语言。<br><img src="/images/CentosImage/CentosChinese.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>软件选择默认最小化安装，改成 GNOME。<br><img src="/images/CentosImage/CentosGNOME.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>安装位置点击进入如下图所示<br><img src="/images/CentosImage/CentosFenqu.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>根据实际情况选择要安装的目的地磁盘，图片上是安装在 40G 的一个硬盘中，选择我要配置分区  </li><li>进入后我选择的是分区方案 LVM，然后点击“点这里自动创建。记得删除下面的系统原有的分区。<br><img src="/images/CentosImage/CentosFenqu2.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>根据需求调整分区大小，一般 swap 是内存的 2 倍，最大别超过 16G。/boot 是用于一些配置启动文件，一般 500MB-1G 就足够。/一般配置150G-200G,/home 用于存放数据，配置完后点击完成。所有都修改好后点击下一步。系统会进入准备安装界面。<br><img src="/images/CentosImage/CentosFenpei.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>安装界面可以设置 root 密码和创建用户密码。填好后接下来就是等待安装，直至完成，会出现重启按钮。点击重启。<br><img src="/images/CentosImage/CentosAnzhuang.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>重启后进入欢迎界面，记得拔下U盘，同意许可信息后就进入正式页面，可以使用了。建议先创建用户，和配置好网络，固定好ip。打开终端，查看安装的 centos 版本  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/redhat-releaseCentOS </span><br><span class="line">Linux release 7.4.1708 (Core)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;准备系统&quot;&gt;&lt;a href=&quot;#准备系统&quot; class=&quot;headerlink&quot; title=&quot;准备系统&quot;&gt;&lt;/a&gt;准备系统&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;准备一个8G以上的U盘  &lt;/li&gt;
&lt;li&gt;访问：&lt;a href=&quot;https://www.centos.or
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Markdown使用记录</title>
    <link href="http://yoursite.com/2018/03/01/article-title/"/>
    <id>http://yoursite.com/2018/03/01/article-title/</id>
    <published>2018-03-01T01:11:30.000Z</published>
    <updated>2018-03-02T08:20:46.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记markdown用法"><a href="#记markdown用法" class="headerlink" title="记markdown用法"></a>记markdown用法</h1><p>第一次使用markdown来写博客，想着既然要用这种语言来写，为了学习和记录用法，不如自己边写下用的过程。在学习中测试并且记录下来以便日后写博客的时候可以使用。<br>注意:Markdown使用<code>#</code>、<code>+</code>、<code>*</code>等符号来标记， 符号后面必须跟上 至少1个 空格才有效！换行的快捷键为2个空格在回车。 </p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><ol><li><p>在标题开头加上1~6个#，分别代表1级~6级标题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li><li><p>在<strong><em> 标题下方 </em></strong> 加上任意个<code>=</code>代表1级标题，加上任意个<code>-</code>代表2级标题。  </p></li></ol><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>引用以<code>&gt;</code>来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用 //&gt;后跟一个空格</span><br><span class="line">&gt;     代码块引用，&gt;后面跟5个空格。</span><br></pre></td></tr></table></figure><p>演示</p><blockquote><p>引用  </p></blockquote><blockquote><pre><code>代码块引用  </code></pre></blockquote><h1 id="行内标记"><a href="#行内标记" class="headerlink" title="行内标记"></a>行内标记</h1><p><div>利用`标记可以让代码变成一行</div><br>代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标记`hellow world`</span><br></pre></td></tr></table></figure></p><p>效果：  </p><p>标记<code>hellow world</code>  </p><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p><strong><em> 注意:必须与上一行距离一个空行 </em></strong>  ，代码块的结束必须要直接回车，如果使用2个空格加回车的方法的话会导致认为代码块仍然是继续的。</p><ol><li>普通代码块利用(```)   </li><li>将语言放在代码块之前来标记（自定义语法）<br>代码:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">```javascript</span><br><span class="line">var boy=10;</span><br><span class="line">var gril=11;</span><br><span class="line">var total=boy+gril;</span><br><span class="line">```</span><br></pre></td></tr></table></figure></li></ol><p>效果:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boy=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> gril=<span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> total=boy+gril;</span><br></pre></td></tr></table></figure></p><h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><p>两个<code>*</code>或<code>-</code>代表加粗，一个<code>*</code>或<code>-</code>代表斜体，<code>~~</code>代表删除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**加粗文本** 或者 __加粗文本__</span><br><span class="line"></span><br><span class="line">*斜体文本*  或者_斜体文本_</span><br><span class="line"></span><br><span class="line">~~删除文本~~</span><br></pre></td></tr></table></figure></p><p>效果: </p><p><strong>加粗文本</strong> 或者 <strong>加粗文本</strong></p><p><em>斜体文本</em>  或者<em>斜体文本</em></p><p><del>删除文本</del>  </p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>无序列表使用星号、加号或是减号作为列表标记：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* Red</span><br><span class="line">* Green</span><br><span class="line">* Blue</span><br></pre></td></tr></table></figure></p><p>效果:</p><ul><li>Red</li><li>Green</li><li>Blue  </li></ul><p>有序列表则使用数字接着一个英文句点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.  Bird</span><br><span class="line">2.  McHale</span><br><span class="line">3.  Parish</span><br></pre></td></tr></table></figure></p><p>效果: </p><ol><li>Bird</li><li>McHale</li><li>Parish  </li></ol><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* * *</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure></p><hr><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。<br>行内式的图片语法看起来像是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![Alt text](/path/to/img.jpg)</span><br><span class="line"></span><br><span class="line">![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</span><br></pre></td></tr></table></figure></p><p>详细叙述如下：  </p><ul><li>一个惊叹号 <code>!</code></li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。  </li></ul><p>参考式的图片语法则长得像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![Alt text][id]</span><br></pre></td></tr></table></figure></p><p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[id]: url/to/image  &quot;Optional title attribute&quot;</span><br></pre></td></tr></table></figure></p><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的img HTML标签。<br><img src="/images/MarkdownImage/test.jpg" width="600px" height="500px" alt="图片飞到火星去了"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;记markdown用法&quot;&gt;&lt;a href=&quot;#记markdown用法&quot; class=&quot;headerlink&quot; title=&quot;记markdown用法&quot;&gt;&lt;/a&gt;记markdown用法&lt;/h1&gt;&lt;p&gt;第一次使用markdown来写博客，想着既然要用这种语言来写，为了学
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/02/28/hello-world/"/>
    <id>http://yoursite.com/2018/02/28/hello-world/</id>
    <published>2018-02-28T08:16:00.000Z</published>
    <updated>2018-03-01T05:16:30.753Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
