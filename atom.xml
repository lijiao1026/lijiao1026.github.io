<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李骄的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-27T08:10:49.900Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>李骄</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java设计模式之工厂模式（简单工厂模式+工厂方法模式+抽象工厂模式）</title>
    <link href="http://yoursite.com/2018/04/25/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%88%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/25/Java设计模式之工厂模式（简单工厂模式-工厂方法模式-抽象工厂模式）/</id>
    <published>2018-04-25T07:48:07.000Z</published>
    <updated>2018-04-27T08:10:49.900Z</updated>
    
    <content type="html"><![CDATA[<p>在面向对象编程中, 最通常的方法是一个new操作符产生一个对象实例,new操作符就是用来构造对象实例的。但是在一些情况下, new操作符直接生成对象会带来一些问题。举例来说, 许多类型对象的创造需要一系列的步骤: 你可能需要计算或取得对象的初始设置; 选择生成哪个子对象实例; 或在生成你需要的对象之前必须先生成一些辅助功能的对象。 在这些情况,新对象的建立就是一个 “过程”，不仅是一个操作，像一部大机器中的一个齿轮传动。<br><strong>解决方案：建立一个工厂来创建对象</strong></p><h5 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h5><ol><li>在很早以前还没有肯德基快餐，人们想吃汉堡需要自己动手制作，然后自己才可以吃到汉堡。</li><li>简单工厂模式：后来出现了肯德基。人们不需要自己去制作汉堡，因为只需要去肯德基就可以吃到美味的汉堡。</li><li>工厂方法模式时代：为了满足不同客户口味的不同，肯德基退出的汉堡种类越来越多，有劲爆鸡腿汉堡，巨无霸汉堡，深海鳕鱼汉堡等等。每个门点会有自己主打的汉堡品牌，即每个门店有自己的特色汉堡，我们可以去相应的门店迟到自己心仪的汉堡。</li><li>抽象工厂模式时代：随着客户的口味要求越来越高，汉堡还会搭配各种小食，于是各个门店又推出了不同的小食搭配。<br><strong>最终是客户只要对肯德基的的销售员说：我要鸡腿堡套餐，销售员就直接给他鸡腿堡加薯条和可乐。而不用自己去烹饪。</strong><br><strong>这就是工厂模式。</strong></li></ol><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><p>工厂模式可以分为3类，分别为简单工厂模式（Simple Factory），工厂方法模式（Factory Method），抽象工厂模式（Abstract Factory），这三种模式逐步抽象，并且更具一般性。可以简单工厂模式（Simple Factory）看为工厂方法模式的一种特例，两者归为一类。</p><h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><p>工厂方法模式：<br>一个抽象产品类，可以派生出多个具体产品类。<br>一个抽象工厂类，可以派生出多个具体工厂类。<br>每个具体工厂类只能创建一个具体产品类的实例。<br>抽象工厂模式：<br>多个抽象产品类，每个抽象产品类可以派生出多个具体产品类。<br>一个抽象工厂类，可以派生出多个具体工厂类。<br>每个具体工厂类可以创建多个具体产品类的实例。<br>区别：<br>工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。<br>工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个。两者皆可。</p><h5 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h5><p>客户想吃汉堡，客户和汉堡就紧密耦合在一起，为了降低耦合，就出现了工厂类，把烹饪汉堡的操作细节都放进了工厂里面去，客户直接使用工厂的创建方法，传入想要吃的汉堡类型就可以，这就是简单工厂模式。  </p><ul><li>产品类:  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanburger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hanburger</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChickenBurger</span> <span class="keyword">extends</span> <span class="title">Hanburger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">ChickenBurger</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"烹饪鸡腿汉堡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodHamburger</span> <span class="keyword">extends</span> <span class="title">Hanburger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">CodHamburger</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"烹饪鳕鱼汉堡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>工厂类:  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hanburger <span class="title">createHanburger</span><span class="params">(<span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ChickenBurger();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> CodHamburger();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>客户类:  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       Factory factory=<span class="keyword">new</span> Factory();</span><br><span class="line">       Hanburger chickenBurger=factory.createHanburger(<span class="number">1</span>);</span><br><span class="line">       Hanburger codHamburger=factory.createHanburger(<span class="number">2</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单工厂模式又称静态工厂方法模式。从命名上就可以看出这个模式很简单。他的目的就是:定义一个用于创建对象的接口。<br>先来看看他的组成:  </p><ol><li>工厂类角色:这是本模式的核心，含有一定的商业逻辑和判断逻辑，用来创建产品。</li><li>抽象产品角色:他一般是具体产品继承的父类或者实现的接口。</li><li>具体产品角色：工厂类所创建的对象就是此角色的实例。在java中由一个具体类实现。  </li></ol><p>从开闭原则（对扩展开发；对修改封闭）上来分析下简单工厂模式。当客户不满足现有的汉堡种类，想吃别的类型的汉堡，只要这种汉堡符合抽象产品的制定合同，那么只要通知工厂类就可以制造出来。所以对产品部分来说，他是符合开闭原则的；但是工厂部分好像不太理想，因为每增加一种汉堡，都要在工厂类中增加相应的创建业务逻辑即要新增case方法，这显然是违背开闭原则的。可想而知对于新产品的引入，工厂是非常被动的，对于这样的工厂类，我们称它为全能类或者上帝类。<br><strong>于是工厂方法模式出现了，他把工厂类定义成了接口，而新增的汉堡种类，就增加该种类的对应的工厂类的实现，这样工厂的设计就可以扩展了，而不必去修改原来的代码。</strong></p><h5 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h5><p>工厂方法模式去掉了简单工厂模式中工厂方法的静态属性，使得他可以被子类继承。这样在简单工厂模式里集中在工厂方法上的压力可以由工厂方法模式里不同的工厂子类来分担。<br>工厂方法模式组成：</p><ol><li>抽象工厂角色：这是工厂方法模式的核心，他与应用程序无关，是具体工厂角色必须实现的接口或者必须继承的父类。在java中他由抽象类或者接口来实现。</li><li>具体工厂角色：他含有和具体业务逻辑有关的代码。由应用程序调用以创建对于的具体产品的对象。</li><li>抽象产品角色：他是具体产品继承的父类或者实现的接口。在java中一般有抽象类或者接口来实现。</li><li>具体产品角色：具体工厂角色所创建的对象就是此角色的实例。在java中由具体的类来实现。  </li></ol><p>工厂方法模式使用继承自抽象工厂角色的多个子类来代替简单工厂模式中的“上帝类”。正如上面所说，这样便分担了对象承受的压力；而且这样使得结构变得灵活 起来——当有新的产品产生时，只要按照抽象产品角色、抽象工厂角色提供的合同来生成，那么就可以被客户使用，而不必去修改任何已有 的代码。可以看出工厂角色的结构也是符合开闭原则的！ 代码只改动了工厂类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FactoryHanburger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function">Hanburger <span class="title">createHanburger</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryChickenBurger</span> <span class="keyword">implements</span> <span class="title">FactoryHanburger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChickenBurger <span class="title">createHanburger</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChickenBurger();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryCodHamburger</span> <span class="keyword">implements</span> <span class="title">FactoryHanburger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CodHamburger <span class="title">createHanburger</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CodHamburger();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="comment">/*Factory factory=new Factory();</span></span><br><span class="line"><span class="comment">      Hanburger chickenBurger=factory.createHanburger(1);</span></span><br><span class="line"><span class="comment">      Hanburger codHamburger=factory.createHanburger(2); */</span></span><br><span class="line">      FactoryChickenBurger factoryChickenBurger=<span class="keyword">new</span> FactoryChickenBurger();</span><br><span class="line">      ChickenBurger chickenBurger=factoryChickenBurger.createHanburger();</span><br><span class="line">      FactoryCodHamburger factoryCodHamburger=<span class="keyword">new</span> FactoryCodHamburger();</span><br><span class="line">      CodHamburger codHamburger=factoryCodHamburger.createHanburger();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p> 工厂方法模式仿佛已经很完美的对对象的创建进行了包装，使得客户程序中仅仅处理抽象产品角色提供的接口，但使得对象的数量成倍增长。当产品种类非常多时，会出现大量的与之对应的工厂对象，这不是我们所希望的。</p><h5 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h5><p> 随着客户的要求越来越高，可能不简单会点汉堡一样食品，而是希望有一些经济的套餐，搭配上小食，饮料这样。于是便出现了鸡腿堡套餐（鸡腿汉堡+薯条+可乐），鳕鱼套餐（鳕鱼汉堡+鸡块+咖啡）。这就需要用到抽象工厂模式。抽象工厂模式是工厂方法模式的升级版本，他用来创建一组相关或者相互依赖的对象。<br> 当每个抽象产品都有多于一个的具体子类的时候（小食有薯条和鸡块两种，饮料也有可乐和咖啡两种），工厂角色怎么知道实例化哪一个子类呢？比如每个抽象产品角色都有两个具体产品。抽象工厂模式提供两个具体工厂角色，分别对应于这两个具体产品角色，每一个具体工厂角色只负责某一个产品角色的实例化。每一个具体工厂类只负责创建抽象产品的某一个具体子类的实例。</p><ul><li>产品类  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Drinks</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDrinks</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">implements</span> <span class="title">Drinks</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDrinks</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       System.err.println(<span class="string">"制造咖啡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cola</span> <span class="keyword">implements</span> <span class="title">Drinks</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDrinks</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"制造可乐"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Snack</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSnack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fries</span> <span class="keyword">implements</span> <span class="title">Snack</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSnack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"烹饪薯条"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChickenNugget</span> <span class="keyword">implements</span> <span class="title">Snack</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSnack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"烹饪鸡块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>工厂类：  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSnack</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDrinks</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChickBurgerSetMeal</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSnack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Fries().createSnack();;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDrinks</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Cola().createDrinks();;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodHamburgerSetMeal</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSnack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">new</span> ChickenNugget().createSnack();;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDrinks</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Coffee().createDrinks();;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>客户类：  </li></ul><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span><span class="class"></span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><span class="function">    </span>{        <span class="comment">//鸡腿堡套餐</span>        ChickBurgerSetMeal chickBurgerSetMeal=<span class="keyword">new</span> ChickBurgerSetMeal();        chickBurgerSetMeal.createSnack();        chickBurgerSetMeal.createDrinks();        <span class="comment">//鳕鱼套餐</span>        CodHamburgerSetMeal codHamburgerSetMeal=<span class="keyword">new</span> CodHamburgerSetMeal();        codHamburgerSetMeal.createSnack();        codHamburgerSetMeal.createDrinks();    }}</code></pre><h6 id="抽象工厂模式的优缺点"><a href="#抽象工厂模式的优缺点" class="headerlink" title="抽象工厂模式的优缺点"></a>抽象工厂模式的优缺点</h6><ol><li><p>优点：封装性。每个产品的实现类不是高层模块要关心的，它要关心的是接口，是抽象，它不关心对象是如何创建出来的，这都由工厂类负责的，只要知道工厂类是谁，我就能创建一个需要的对象，省时省力。产品族内的约束为非公开状态。例如生产男女比例的问题上，猜想女娲娘娘肯定有自己的打算，那么在抽象工厂模式中，这些约束都在工厂内里面实现的。</p></li><li><p>缺点: 抽象工厂模式最大的缺点就是产品族扩展非常困难。如果我们要增加一个产品C，也就是说产品族由原来的A和B增加到3个，然后两个实现类都要修改……说到这里，已经知道了扩展的弊端了……注意这里是产品族扩展比较困难，而不是产品等级扩展困难。产品等级扩展还是非常容易的，增加一个产品等级，只要增加一个工厂类负责新增加出来的产品生产任务即可。也就是说横向扩展容易，纵向扩展难。即增加套餐种类容易，增加每种套餐的部件内容难。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在面向对象编程中, 最通常的方法是一个new操作符产生一个对象实例,new操作符就是用来构造对象实例的。但是在一些情况下, new操作符直接生成对象会带来一些问题。举例来说, 许多类型对象的创造需要一系列的步骤: 你可能需要计算或取得对象的初始设置; 选择生成哪个子对象实例
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java的23种设计模式</title>
    <link href="http://yoursite.com/2018/04/25/java%E7%9A%8423%E4%B8%AD%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/04/25/java的23中设计模式/</id>
    <published>2018-04-25T01:44:48.000Z</published>
    <updated>2018-04-25T06:38:30.530Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JAVA的设计模式分为3大类"><a href="#JAVA的设计模式分为3大类" class="headerlink" title="JAVA的设计模式分为3大类"></a>JAVA的设计模式分为3大类</h3><ul><li>创建型模式（5种）:工厂方法模式，抽象工厂模式，单例模式，建造者模式，原型模式。</li><li>结构型模式（7种）：适配器模式，装饰器模式，代理模式，外观模式，桥接模式，组合模式，享元模式。</li><li>行为型模式（11种）：策略模式，模板方法模式，观察者模式，迭代子模式，责任链模式，命令模式，备忘录模式，状态模式，访问者模式，中介者模式，解释器模式。</li></ul><h3 id="设计模式的6大原则"><a href="#设计模式的6大原则" class="headerlink" title="设计模式的6大原则"></a>设计模式的6大原则</h3><ol><li>开闭原则（Open Close Principle）<br>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果经常使用接口和抽象类。</li><li>里氏代换原则（Liskov Substitution Principle）<br>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。  </li><li>依赖倒转原则（Dependence Inversion Principle）<br>这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。</li><li>接口隔离原则（Interface Segregation Principle）<br>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</li><li>迪米特法则（最少知道原则）（Demeter Principle）<br>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</li><li>合成复用原则（Composite Reuse Principle）<br>原则是尽量使用合成/聚合的方式，而不是使用继承。继承实际上破坏了类的封装性，超类的方法可能会被子类修改。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JAVA的设计模式分为3大类&quot;&gt;&lt;a href=&quot;#JAVA的设计模式分为3大类&quot; class=&quot;headerlink&quot; title=&quot;JAVA的设计模式分为3大类&quot;&gt;&lt;/a&gt;JAVA的设计模式分为3大类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;创建型模式（5种）:工厂方法模式
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小知识点整理记录</title>
    <link href="http://yoursite.com/2018/04/11/%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/04/11/小知识点整理记录/</id>
    <published>2018-04-11T06:04:57.000Z</published>
    <updated>2018-04-16T12:09:00.181Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入我的生日</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      这是面试中遇到的自己不会的问题的答案
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Centos7安装oracle</title>
    <link href="http://yoursite.com/2018/03/19/Centos7%E5%AE%89%E8%A3%85oracle/"/>
    <id>http://yoursite.com/2018/03/19/Centos7安装oracle/</id>
    <published>2018-03-19T05:29:03.000Z</published>
    <updated>2018-04-03T07:29:50.594Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章介绍完了如何从零开始到安装好所有环境，但是数据库用的是oracle的话安装比较繁琐，所以另开一篇。</p><h1 id="系统准备"><a href="#系统准备" class="headerlink" title="系统准备"></a>系统准备</h1><p>oracle分我64位和32位的，本次使用的是64为的安装包，前往oracle官网即可下载到，分别为linux.x64_11gR2_database_1of2和linux.x64_11gR2_database_2of2。做完这些之后如果没有关闭防火墙和配置好固定ip请先看前面文章配置。  </p><h1 id="用户和环境准备"><a href="#用户和环境准备" class="headerlink" title="用户和环境准备"></a>用户和环境准备</h1><ol><li><p>安装依赖包，执行命令:yum -y install gcc gcc-c++ make binutilscompat-libstdc++-33 elfutils-libelf elfutillibelf-devel glibc glibcommonglibc-devel libaio libaio-devel libgcclibstdc++ libstdc++-devel unixODBC unixODBC-devel </p></li><li><p>创建用户和组。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# sysctl -p</span><br><span class="line">[root@localhost ~]# groupadd -g 200 oinstall</span><br><span class="line">[root@localhost ~]# groupadd -g 201 dba</span><br><span class="line">[root@localhost ~]# useradd -u 440 -g oinstall -G dba oracle</span><br><span class="line">[root@localhost ~]# passwd oracle</span><br></pre></td></tr></table></figure></li><li><p>修改内核参数。执行命令:<code>vim /etc/sysctl.conf</code>，在末尾添加如下信息。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_local_port_range= 9000 65500</span><br><span class="line">fs.file-max = 6815744 </span><br><span class="line">kernel.shmall = 10523004</span><br><span class="line">kernel.shmmax = 6465333657</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100128</span><br><span class="line">net.core.rmem_default=262144</span><br><span class="line">net.core.wmem_default=262144</span><br><span class="line">net.core.rmem_max=4194304</span><br><span class="line">net.core.wmem_max=1048576</span><br><span class="line">fs.aio-max-nr = 1048576</span><br></pre></td></tr></table></figure></li><li><p>修改系统资源限制。执行命令: <code>vim /etc/security/limits.conf</code> ，末尾添加如下:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oracle soft nproc 2047 </span><br><span class="line">oracle hard nproc 16384</span><br><span class="line">oracle soft nofile 1024 </span><br><span class="line">oracle hard nofile 655</span><br></pre></td></tr></table></figure></li><li><p>在执行命令:<code>vi/etc/pam.d/login</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session required pam_namespace.so #下面添加一条pam_limits.so </span><br><span class="line">session required pam_limits.so</span><br></pre></td></tr></table></figure></li><li><p>在执行命令:<code>vi/etc/profile</code> 添加如下  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$USER</span> =<span class="string">"oracle"</span> ]; <span class="keyword">then</span></span><br><span class="line"> <span class="keyword">if</span> [ <span class="variable">$SHELL</span> = <span class="string">"/bin/ksh"</span> ];<span class="keyword">then</span></span><br><span class="line"> <span class="built_in">ulimit</span> -p 16384</span><br><span class="line"> <span class="built_in">ulimit</span> -n 65536</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">ulimit</span> -u 16384 -n 65536</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li><p>创建安装目录及设置权限，命令行输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# mkdir /opt/oracle</span><br><span class="line">[root@localhost opt]# mkdir /opt/oracle/app</span><br><span class="line">[root@localhost opt]# mkdir /opt/oracle/oradata</span><br><span class="line">[root@localhost opt]# chmod 755 /opt/oracle</span><br><span class="line">[root@localhost opt]# chmod 755 /opt/oracle/app</span><br><span class="line">[root@localhost opt]# chown oracle.oinstall -R /opt/oracle</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量。先切换到oracle用户，执行命令<code>su oracle</code>,然后执行命令<code>vi ~/.bash_profile</code>,加入如下内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export ORACLE_BASE=/opt/oracle/app</span><br><span class="line">export ORACLE_HOME=$ORACLE_BASE/product/11.2.0/dbhome_1</span><br><span class="line">export PATH=$PATH:$ORACLE_HOME/bin</span><br><span class="line">export ORACLE_SID=orcl</span><br><span class="line">export ORACLE_PID=orcl</span><br></pre></td></tr></table></figure></li><li><p>再执行命令:<code>source .bash_profile</code>立即生效。如果提示没有权限的话，使用sudo执行。</p></li><li>将已经下载好的两个oracle压缩文件复制到/media文件夹里面。然后解压文件，执行命令:<code>unzip /media/linux.x64_11gR2_database_1of2.zip</code>和<code>unzip /media/linux.x64_11gR2_database_2of2.zip</code>，解压完后执行命令<code>xhost +</code>开启图形化桌面，如果不能执行，就先执行命令:<code>export DISPLAL=:0</code>再执行刚才的命令。  </li><li>切换到oracle用户，<code>su oracle</code>，然后切换到/media/database目录下，先执行<code>export LANG=EN</code>切换为安装的时候英文,执行<code>./runInstall</code>  </li></ol><h1 id="图形化界面安装"><a href="#图形化界面安装" class="headerlink" title="图形化界面安装"></a>图形化界面安装</h1><ol><li>不要输入email，直接next<br><img src="/images/Oracle/oracle1.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>选择安装数据库软件并创建数据，也可以选择第二项仅安装数据库软件，然后next。<br><img src="/images/Oracle/oracle2.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>选择服务器版本，如图，点击next。<br><img src="/images/Oracle/oracle3.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>单例数据库，如图，点击next。<br><img src="/images/Oracle/oracle4.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>高级模式安装，如图，点击next。<br><img src="/images/Oracle/oracle5.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>添加支持语言，如图，点击next。<br><img src="/images/Oracle/oracle6.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>选择要安装的版本，如图，点击next。<br><img src="/images/Oracle/oracle7.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>安装数据库目录，如图，点击next。<br><img src="/images/Oracle/oracle8.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>创建详细目录。<br><img src="/images/Oracle/oracle9.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>选择配置类型。<br><img src="/images/Oracle/oracle10.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>数据库与服务名。<br><img src="/images/Oracle/oracle11.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>开启自动内存管理（如果512m太大，会出现提示，减少一些就可以），然后先不要点击next，而是点击Memory旁边的Charactor sets选项。<br><img src="/images/Oracle/oracle12.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>设置默认编码为UTF-8。<br><img src="/images/Oracle/oracle13.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>启用oracle企业管理控制台OEM。<br><img src="/images/Oracle/oracle14.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>选择数据库文件目录。<br><img src="/images/Oracle/oracle15.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>自动备份。<br><img src="/images/Oracle/oracle16.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>设置数据库用户名和密码，他是有一个密码建议的，否则会提示错误，密码建议是包含大写和小写字母，总长度不能低于8位。<br><img src="/images/Oracle/oracle17.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>授权的组。<br><img src="/images/Oracle/oracle18.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>检查oracle一些安装要求，包都已经安装，直接忽略。<br><img src="/images/Oracle/oracle19.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>开始安装。<br><img src="/images/Oracle/oracle20.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li><p>安装完成后，会出来一个对话框，提示使用root用户执行这两个脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ /opt/oracle/oraInventory/orainstRoot.sh</span><br><span class="line">[root@localhost ~]$ /opt/oracle/app/product/11.2.0/dbhome_1/root.</span><br></pre></td></tr></table></figure></li><li><p>启动数据库。执行命令如下，如果没有配置好环境变量，将会无法启动！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@oracledb ~]# su –oracle</span><br><span class="line">[oracle@oracledb ~]# lsnrctl start</span><br><span class="line">[oracle@oracledb ~]# sqlplus / as sys</span><br></pre></td></tr></table></figure></li><li><p>设置oracle开机启动。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.键入命令“vi /etc/oratab”（使用vi编辑器编辑文件/etc/oratab）</span><br><span class="line">2.进入vi编辑器后，找到“orcl:/opt/oracle/app/product/11.2.0/dbhome_1:N”，改为“orcl:/opt/oracle/app/product/11.2.0/dbhome_1:Y”。修改完成后，保存退出vi。</span><br><span class="line">3.键入命令 vi /etc/rc.d/rc.local</span><br><span class="line">4.在vi编辑器中，添加：</span><br><span class="line">su oracle -lc &quot;/opt/oracle/app/product/11.2.0/dbhome_1/bin/lsnrctl start&quot;</span><br><span class="line">su oracle -lc /opt/oracle/app/product/11.2.0/dbhome_1/bin/dbstart</span><br><span class="line">5.保存并退出vi。</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上篇文章介绍完了如何从零开始到安装好所有环境，但是数据库用的是oracle的话安装比较繁琐，所以另开一篇。&lt;/p&gt;
&lt;h1 id=&quot;系统准备&quot;&gt;&lt;a href=&quot;#系统准备&quot; class=&quot;headerlink&quot; title=&quot;系统准备&quot;&gt;&lt;/a&gt;系统准备&lt;/h1&gt;&lt;p&gt;o
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux从零到成功部署项目</title>
    <link href="http://yoursite.com/2018/03/19/Linux%E4%BB%8E%E9%9B%B6%E5%88%B0%E6%88%90%E5%8A%9F%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2018/03/19/Linux从零到成功部署项目/</id>
    <published>2018-03-19T01:20:21.000Z</published>
    <updated>2018-03-20T01:16:42.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>上篇文章写完了如何将新机安装成linux7.4系统，这篇将写完禁用防火墙，开启SSH服务，开启VNC服务，安装JDK，安装TOMCAT。  </p><h1 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h1><ol><li>查看 SELinux 状态：/usr/sbin/sestatus -v<br><img src="/images/CentosAfterImage/SelinuxState.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li><p>临时关闭（不用重启机器）:这种方法重启后就失效，而且关闭后很多服务还是没法使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# setenforce 0 #设置 SELinux 成为 permissive 模式 </span><br><span class="line">[root@localhost ~]# setenforce 1 #设置 SELinux 成为 enforcing 模式</span><br></pre></td></tr></table></figure></li><li><p>永久关闭:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/selinux/conf</span><br></pre></td></tr></table></figure></li><li><p>将 SELINUX=enforcing 改为 SELINUX=disable,（按键盘字母 a，启用编辑，修改后按 esc，输入“：wq”，表示保存修改）如图，然后重启机器，执行命令reboot。<br><img src="/images/CentosAfterImage/CloseSelinux.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </p></li><li>Firewalld关闭，输入命令:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl stop firewalld.service 关闭防火墙</span><br><span class="line">[root@localhost ~]# systemctl disable firewalld.service 禁止防火墙开机启动</span><br></pre></td></tr></table></figure></li></ol><h1 id="SSH服务"><a href="#SSH服务" class="headerlink" title="SSH服务"></a>SSH服务</h1><ol><li><p>输入命令，查看SSH服务是否安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rpm -qa | grep ssh</span><br></pre></td></tr></table></figure></li><li><p>如果出现如图所示，就说明已经安装了SSH服务。<br><img src="/images/CentosAfterImage/SSHDownload.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </p></li><li>如果没有的话，执行命令yum install openssh-server 安装。  </li><li>启动SSH服务，执行命令:service sshd restart 重启 SSH 服务,出现如下：Redirecting to /bin/systemctl restart sshd.service。注：命令：service sshd start 启动服务 | 命令：service sshd stop 停止服务重启后可输入：netstat -antp | grep sshd 查看是否启动 22 端口。</li><li>设置开机自启动。输入命令：chkconfig sshd on。注：若是 chkconfig sshd off 则禁止 SSH 开机启动。  </li></ol><h1 id="安装lrzsz上传下载程序"><a href="#安装lrzsz上传下载程序" class="headerlink" title="安装lrzsz上传下载程序"></a>安装lrzsz上传下载程序</h1><ol><li><p>检查是否安装lrzsz,输入命令rpm -qa |grep lrzsz<br><img src="/images/CentosAfterImage/lrzszDownload.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>显示已经系统自带这款软件。假如没有安装，则输入命令安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum install -y lrzsz</span><br></pre></td></tr></table></figure></li><li><p>上传，从 Windows 上传文件，上传命令为 rz；在 Linux 命令行下输入 rz，上传的文件在当前命令行的目录下。  </p></li><li>下载。<code>[root@localhost ~]# sz 文件名</code>  </li></ol><h1 id="VNC远程服务"><a href="#VNC远程服务" class="headerlink" title="VNC远程服务"></a>VNC远程服务</h1><ol><li><p>检查 VNC 远程包是否安装，输入命令:<code>[root@localhost ~]# rpm -q tigervnctigervnc-server</code>出现如下提示：<br><code>未安装软件包 tigervnctigervnc-server</code><br>再输入：<code>[root@localhost ~]# rpm -qa |grep vnc</code>出现如下提示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tigervnc-license-1.8.0-1.el7.noarch</span><br><span class="line">tigervnc-server-minimal-1.8.0-1.el7.x86_64</span><br><span class="line">gvnc-0.7.0-2.el7.x86_64</span><br><span class="line">gtk-vnc2-0.7.0-2.el7.x86</span><br></pre></td></tr></table></figure></li><li><p>提示中看出发现少一个 tigervnc-server 安装包没有安装，执行命令<code>[root@localhost ~]# yum install –y tigervnc tigervnc-server</code>遇到询问都输入 y，然后回车。直至安装完成。  </p></li><li>启用vncserver服务，<code>[root@localhost ~]# vncserver</code>,会跳出提示要求你设置密码，自己输入密码就行。设置好后就能尝试登陆，VNC 默认端口是 5901  </li><li>开启VNC，尝试登录。<br><img src="/images/CentosAfterImage/VNCServer.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>另外 VNC 设置开机自启动，无论实在 centos6.7 版本或者 7.4 版本都不成功，所以每次都是设置 ssh 自启动后，链接 ssh 然后输入命令：<code>[root@localhost bin]# vncserver</code>  </li></ol><h1 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h1><ol><li>查看软件包，输入命令:<code>[root@localhost network-scripts]# rpm -qa | grep java</code><br><img src="/images/CentosAfterImage/JAVAPackage.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>一般 centos 都会默认安装 jdk，但我们这里要使用自己的 jdk，所以卸载掉系统自带的 jdk。输入卸载命令:<br><img src="/images/CentosAfterImage/UninstallJava.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>卸载完成后再次输入:<code>[root@localhost network-scripts]# rpm -qa | grep java</code>查看是否还存在java软件包。  </li><li>安装JDK<br>上传新的 jdk-7-linux-x64.rpm 软件到/usr/local/执行以下操作:<br><code>[root@localhost local]# rpm -ivh jdk-7u79-linux-x64.rpm</code>,进行 rpm 安装包的安装。<br><img src="/images/CentosAfterImage/JAVAInstall.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>输入java -version，查看版本。<br><img src="/images/CentosAfterImage/JAVAVersion.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li></ol><h1 id="安装TOMCAT"><a href="#安装TOMCAT" class="headerlink" title="安装TOMCAT"></a>安装TOMCAT</h1><ol><li><p>上传安装包。将 apache-tomcat-7.0.73.tar.gz 文件上传到/usr/local 。执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# tar -zxv -f apache-tomcat-7.0.73.tar.gz // 解压压缩包 </span><br><span class="line">[root@localhost local]#rm -rf apache-tomcat-7.0.73.tar.gz // 删除压缩包 </span><br><span class="line">[root@localhost local]# mv apache-tomcat-7.0.73 tomcat //修改</span><br></pre></td></tr></table></figure></li><li><p>进入 tomcat/bin 目录，输入命令，开启 tomcat。<code>[root@localhost bin]# ./startup.sh</code>然后打开浏览器，访问 <a href="http://IP" target="_blank" rel="noopener">http://IP</a> 地址:端口号（默认 8080),出现 tomcat 主页面既表示安装成功。<br><img src="/images/CentosAfterImage/TOMCATStartup.jpg" width="600px" height="500px" alt="图片飞到火星去了"> </p></li><li>关闭 tomcat 命令则进入/tomcat/bin 目录，输入:<code>./shutdown.sh</code></li><li>修改tomcat内存配置。先关闭tomcat，修改内存大小：打开 tomcat/bin/catalina.sh找到 cygwin=false，在上面添加:<br><code>export JAVA_OPTS=&quot;-Xms1024m -Xmx1024m -XX:PermSize=128m -XX:MaxPermSize=256m&quot;</code><br><img src="/images/CentosAfterImage/JAVAJVM.jpg" width="600px" height="500px" alt="图片飞到火星去了"></li><li>注：-Xms128m JVM 初始分配的堆内<br>-Xmx512m JVM 最大允许分配的堆内存，按需分配<br>-XX:PermSize=64M JVM 初始分配的非堆内存<br>-XX:MaxPermSize=128M JVM 最大允许分配的非堆内存，按需分配  </li><li>修改tomcat字符集，tomcat 下的 conf 文件夹，打开 server.xml 文件,找到如下内容：  <pre><code>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot;/&gt;</code></pre>在 redirectPort=”8443”后面加上 URIEncoding=”utf-8”。<br><img src="/images/CentosAfterImage/TOMCATUtf8.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>配置tomcat开机启动，打开/etc/rc.d/rc.local 键入： /usr/local/tomcat/bin/startup.sh。<br><img src="/images/CentosAfterImage/TOMCATStart.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>保存并且退出。打开 tomcat 服务，重启电脑，尝试访问 tomcat 服务器。这时候发现曾经在 centos6.7 可以开机自启动 tomcat，在 centos7.4居然就不行。这是因为rc.local没有执行权限，执行命令<code>chmod +x /etc/rc.d/rc.local</code>重启后发现可以了。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h1&gt;&lt;p&gt;上篇文章写完了如何将新机安装成linux7.4系统，这篇将写完禁用防火墙，开启SSH服务，开启VNC服务，安装JDK，安装TOMCAT。  
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux安装Centos7.0</title>
    <link href="http://yoursite.com/2018/03/16/Linux%E5%AE%89%E8%A3%85Centous7-0/"/>
    <id>http://yoursite.com/2018/03/16/Linux安装Centous7-0/</id>
    <published>2018-03-16T05:28:11.000Z</published>
    <updated>2018-03-16T07:24:48.751Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备系统"><a href="#准备系统" class="headerlink" title="准备系统"></a>准备系统</h1><ol><li>准备一个8G以上的U盘  </li><li>访问：<a href="https://www.centos.or" target="_blank" rel="noopener">https://www.centos.or</a><br><img src="/images/CentosImage/CentosWeb.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>点击 Get Centos Now,跳出页面后选择DVD ISO<br><img src="/images/CentosImage/CentosDVD.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>从 Actual Country 中选择镜像网址下载:一般选择：<a href="http://centos.ustc.edu.cn/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1708.iso" target="_blank" rel="noopener">http://centos.ustc.edu.cn/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1708.iso</a>  </li><li>下载软件：USBWriter，网址<a href="https://sourceforge.net/projects/usbwrite" target="_blank" rel="noopener">https://sourceforge.net/projects/usbwrite</a> 下载完后打开软件，将 Centos 制作成 U 盘启动盘<br><img src="/images/CentosImage/CentosUsbWriter.jpg" width="600px" height="500px" alt="图片飞到火星去了">  <h1 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h1></li><li>更改 bios 启动顺序，开机后一直按F12或者F10，即可进入bios界面（即 U 盘先启动）  </li><li>进入安装界面<br><img src="/images/CentosImage/CentosLogin.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>界面说明：Install CentOS 7安装 CentOS 7（选择此项进入安装）<br>Test this media &amp; install CentOS 7 测试安装文件并安装<br>CentOS 7Troubleshooting 修复  </li><li>进入后进入安装语言选择界面:选择中文，这个默认指的是安装时候语言而不是系统语言。<br><img src="/images/CentosImage/CentosChinese.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>软件选择默认最小化安装，改成 GNOME。<br><img src="/images/CentosImage/CentosGNOME.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>安装位置点击进入如下图所示<br><img src="/images/CentosImage/CentosFenqu.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>根据实际情况选择要安装的目的地磁盘，图片上是安装在 40G 的一个硬盘中，选择我要配置分区  </li><li>进入后我选择的是分区方案 LVM，然后点击“点这里自动创建。记得删除下面的系统原有的分区。<br><img src="/images/CentosImage/CentosFenqu2.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>根据需求调整分区大小，一般 swap 是内存的 2 倍，最大别超过 16G。/boot 是用于一些配置启动文件，一般 500MB-1G 就足够。/一般配置150G-200G,/home 用于存放数据，配置完后点击完成。所有都修改好后点击下一步。系统会进入准备安装界面。<br><img src="/images/CentosImage/CentosFenpei.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>安装界面可以设置 root 密码和创建用户密码。填好后接下来就是等待安装，直至完成，会出现重启按钮。点击重启。<br><img src="/images/CentosImage/CentosAnzhuang.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>重启后进入欢迎界面，记得拔下U盘，同意许可信息后就进入正式页面，可以使用了。建议先创建用户，和配置好网络，固定好ip。打开终端，查看安装的 centos 版本  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/redhat-releaseCentOS </span><br><span class="line">Linux release 7.4.1708 (Core)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;准备系统&quot;&gt;&lt;a href=&quot;#准备系统&quot; class=&quot;headerlink&quot; title=&quot;准备系统&quot;&gt;&lt;/a&gt;准备系统&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;准备一个8G以上的U盘  &lt;/li&gt;
&lt;li&gt;访问：&lt;a href=&quot;https://www.centos.or
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Markdown使用记录</title>
    <link href="http://yoursite.com/2018/03/01/article-title/"/>
    <id>http://yoursite.com/2018/03/01/article-title/</id>
    <published>2018-03-01T01:11:30.000Z</published>
    <updated>2018-03-02T08:20:46.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记markdown用法"><a href="#记markdown用法" class="headerlink" title="记markdown用法"></a>记markdown用法</h1><p>第一次使用markdown来写博客，想着既然要用这种语言来写，为了学习和记录用法，不如自己边写下用的过程。在学习中测试并且记录下来以便日后写博客的时候可以使用。<br>注意:Markdown使用<code>#</code>、<code>+</code>、<code>*</code>等符号来标记， 符号后面必须跟上 至少1个 空格才有效！换行的快捷键为2个空格在回车。 </p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><ol><li><p>在标题开头加上1~6个#，分别代表1级~6级标题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li><li><p>在<strong><em> 标题下方 </em></strong> 加上任意个<code>=</code>代表1级标题，加上任意个<code>-</code>代表2级标题。  </p></li></ol><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>引用以<code>&gt;</code>来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用 //&gt;后跟一个空格</span><br><span class="line">&gt;     代码块引用，&gt;后面跟5个空格。</span><br></pre></td></tr></table></figure><p>演示</p><blockquote><p>引用  </p></blockquote><blockquote><pre><code>代码块引用  </code></pre></blockquote><h1 id="行内标记"><a href="#行内标记" class="headerlink" title="行内标记"></a>行内标记</h1><p><div>利用`标记可以让代码变成一行</div><br>代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标记`hellow world`</span><br></pre></td></tr></table></figure></p><p>效果：  </p><p>标记<code>hellow world</code>  </p><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p><strong><em> 注意:必须与上一行距离一个空行 </em></strong>  ，代码块的结束必须要直接回车，如果使用2个空格加回车的方法的话会导致认为代码块仍然是继续的。</p><ol><li>普通代码块利用(```)   </li><li>将语言放在代码块之前来标记（自定义语法）<br>代码:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">```javascript</span><br><span class="line">var boy=10;</span><br><span class="line">var gril=11;</span><br><span class="line">var total=boy+gril;</span><br><span class="line">```</span><br></pre></td></tr></table></figure></li></ol><p>效果:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boy=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> gril=<span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> total=boy+gril;</span><br></pre></td></tr></table></figure></p><h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><p>两个<code>*</code>或<code>-</code>代表加粗，一个<code>*</code>或<code>-</code>代表斜体，<code>~~</code>代表删除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**加粗文本** 或者 __加粗文本__</span><br><span class="line"></span><br><span class="line">*斜体文本*  或者_斜体文本_</span><br><span class="line"></span><br><span class="line">~~删除文本~~</span><br></pre></td></tr></table></figure></p><p>效果: </p><p><strong>加粗文本</strong> 或者 <strong>加粗文本</strong></p><p><em>斜体文本</em>  或者<em>斜体文本</em></p><p><del>删除文本</del>  </p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>无序列表使用星号、加号或是减号作为列表标记：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* Red</span><br><span class="line">* Green</span><br><span class="line">* Blue</span><br></pre></td></tr></table></figure></p><p>效果:</p><ul><li>Red</li><li>Green</li><li>Blue  </li></ul><p>有序列表则使用数字接着一个英文句点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.  Bird</span><br><span class="line">2.  McHale</span><br><span class="line">3.  Parish</span><br></pre></td></tr></table></figure></p><p>效果: </p><ol><li>Bird</li><li>McHale</li><li>Parish  </li></ol><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* * *</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure></p><hr><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。<br>行内式的图片语法看起来像是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![Alt text](/path/to/img.jpg)</span><br><span class="line"></span><br><span class="line">![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</span><br></pre></td></tr></table></figure></p><p>详细叙述如下：  </p><ul><li>一个惊叹号 <code>!</code></li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。  </li></ul><p>参考式的图片语法则长得像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![Alt text][id]</span><br></pre></td></tr></table></figure></p><p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[id]: url/to/image  &quot;Optional title attribute&quot;</span><br></pre></td></tr></table></figure></p><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的img HTML标签。<br><img src="/images/MarkdownImage/test.jpg" width="600px" height="500px" alt="图片飞到火星去了"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;记markdown用法&quot;&gt;&lt;a href=&quot;#记markdown用法&quot; class=&quot;headerlink&quot; title=&quot;记markdown用法&quot;&gt;&lt;/a&gt;记markdown用法&lt;/h1&gt;&lt;p&gt;第一次使用markdown来写博客，想着既然要用这种语言来写，为了学
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/02/28/hello-world/"/>
    <id>http://yoursite.com/2018/02/28/hello-world/</id>
    <published>2018-02-28T08:16:00.000Z</published>
    <updated>2018-03-01T05:16:30.753Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
