<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李骄的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-03T02:45:29.156Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>李骄</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java设计模式之适配器模式</title>
    <link href="http://yoursite.com/2018/05/03/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/05/03/Java设计模式之适配器模式/</id>
    <published>2018-05-03T01:34:57.000Z</published>
    <updated>2018-05-03T02:45:29.156Z</updated>
    
    <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>适配器就是一种适配中间件，它存在于不匹配的二者之间，用于连接二者，将不匹配变得匹配，简单点理解就是平常所见的转接头，转换器之类的存在。适配器模式有两种：类适配器、对象适配器。</p><h4 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h4><p>原理：通过继承来实现适配器功能。当我们要访问的接口A中没有我们想要的方法 ，却在另一个接口B中发现了合适的方法，我们又不能改变访问接口A，在这种情况下，我们可以定义一个适配器p来进行中转，这个适配器p要实现我们访问的接口A，这样我们就能继续访问当前接口A中的方法（虽然它目前不是我们的菜），然后再继承接口B的实现类BB，这样我们可以在适配器P中访问接口B的方法了，这时我们在适配器P中的接口A方法中直接引用BB中的合适方法，这样就完成了一个简单的类适配器。<br>比如我上次遇到的想用手柄连接手机玩游戏的问题，手机只有type-c接口，但是手柄的接口是usb接口的，那么我就需要一个适配器将usb接口转换为type-c接口。就以这个为例我们来实现下代码。</p><ul><li>type-c接口:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TypeC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">isTypeC</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>usb接口:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Usb</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">isUsb</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>type-c接口实现类:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeCer</span> <span class="keyword">implements</span> <span class="title">TypeC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isTypeC</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"type-c接口"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>适配器:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsbAdapter</span> <span class="keyword">extends</span> <span class="title">TypeCer</span> <span class="keyword">implements</span> <span class="title">Usb</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isUsb</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        isTypeC();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Usb usb=<span class="keyword">new</span> UsbAdapter();</span><br><span class="line">        usb.isUsb();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过适配器，成功将USB接口转换为了Type-c接口，最后在控制台打印了type-c接口。</p><h4 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h4><p>原理：通过组合来实现适配器功能。当我们要访问的接口A中没有我们想要的方法 ，却在另一个接口B中发现了合适的方法，我们又不能改变访问接口A，在这种情况下，我们可以定义一个适配器p来进行中转，这个适配器p要实现我们访问的接口A，这样我们就能继续访问当前接口A中的方法（虽然它目前不是我们的菜），然后在适配器P中定义私有变量C（对象）（B接口指向变量名），再定义一个带参数的构造器用来为对象C赋值，再在A接口的方法实现中使用对象C调用其来源于B接口的方法。</p><ul><li>type-c接口:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TypeC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">isTypeC</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>usb接口:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Usb</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">isUsb</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>type-c接口实现类:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeCer</span> <span class="keyword">implements</span> <span class="title">TypeC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isTypeC</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"type-c接口"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>适配器:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsbObjectAdapter</span> <span class="keyword">implements</span> <span class="title">Usb</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TypeC typec;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UsbObjectAdapter</span><span class="params">(TypeC typeC)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.typec=typeC;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isUsb</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        typec.isTypeC();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类:</li></ul><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectTest</span></span><span class="class"></span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><span class="function">    </span>{        Usb usb=<span class="keyword">new</span> UsbObjectAdapter(<span class="keyword">new</span> TypeCer());        usb.isUsb();    }}</code></pre><p><strong>代码在github，地址为</strong><a href="https://github.com/lijiao1026/DesignPatterns" target="_blank" rel="noopener">https://github.com/lijiao1026/DesignPatterns</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;p&gt;适配器就是一种适配中间件，它存在于不匹配的二者之间，用于连接二者，将不匹配变得匹配，简单点理解就是平常所见的转接头，转换器之类的存在。适配器
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java设计模式之原型模式</title>
    <link href="http://yoursite.com/2018/05/02/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/05/02/Java设计模式之原型模式/</id>
    <published>2018-05-02T05:37:12.000Z</published>
    <updated>2018-05-02T06:59:42.819Z</updated>
    
    <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>在开发过程中，有时会遇到为一个类创建多个实例的情况，这些实例内部成员往往完全相同或有细微的差异，而且实例的创建开销比较大或者需要输入较多参数，如果能通过复制一个已创建的对象实例来重复创建多个相同的对象，这就可以大大减少创建对象的开销，这个时候就需要原型模式。</p><h4 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h4><p>原型模式可以通过一个对象实例确定创建对象的种类，并且通过拷贝创建新的实例。总得来说，原型模式实际上就是从一个对象创建另一个新的对象，使新的对象有具有原对象的特征。我们知道Object乃一切对象的父类（超类），并且Object有一个原生的clone方法，但是该方法的调用必须要求类实现了Cloneable接口，虽然Cloneable接口只是一个摆设，里面空空荡荡，姑且就当Cloneable接口是clone方法实现的一个标志吧！我们可以创建一个类实现Cloneable即可，在覆写clone方法即可完成该类的克隆了。 总结下就是说实现原型类Prototype必须具备以下2个条件：</p><ol><li>实现Cloneable接口。在java语言有一个Cloneable的接口，它的作用只有一个，就是在运行时通知JVM虚拟机可以安全的在实现了此接口的类上使用 clone 方法。在java JVM虚拟机中，只有实现了这个接口的类才可以被拷贝，否则运行时会抛出CloneNotSupportedException异常。</li><li>重写Object类中的clone方法。java中，所有类的父类都是Object类，Object类中有一个clone方法，作用是返回对象的一个拷贝，但是其作用域是peotected类型的，一般的类无法调用，因此，Prototype类需要将clone方法的作用域修改为public类型。</li></ol><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>下面写一个Person类实现Cloneable接口，并且重写了超类的clone方法，里面使用了super.clone。注意其中有个List类型的hands变量。</p><ul><li>Person类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hands;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHands</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hands;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHands</span><span class="params">(List&lt;String&gt; hands)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hands = hands;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Person <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> CloneNotSupportedException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (Person)<span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", hands="</span> + hands + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        List&lt;String&gt; hands=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        hands.add(<span class="string">"左手"</span>);</span><br><span class="line">        <span class="comment">//第一个对象</span></span><br><span class="line">        Person person=<span class="keyword">new</span> Person();</span><br><span class="line">        person.setHands(hands);</span><br><span class="line">        person.setName(<span class="string">"男人"</span>);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">        <span class="comment">//第二个对象</span></span><br><span class="line">        Person person2=person.clone();</span><br><span class="line">        System.out.println(person2.toString());</span><br><span class="line">        person2.setName(<span class="string">"女人"</span>);</span><br><span class="line">        person2.setHands(hands);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">        System.out.println(person2.toString());</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印出来的结果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person [name=男人, hands=[左手]]</span><br><span class="line">Person [name=男人, hands=[左手]]</span><br><span class="line">Person [name=男人, hands=[左手, 右手]]</span><br><span class="line">Person [name=女人, hands=[左手, 右手]]</span><br></pre></td></tr></table></figure></p><p>从上面的运行结果可以看出，虽然person2成功复制了person，但是当我们对person2的hands修改时person的hands也被修改了，但是对name的修改却没关系。这是由于我们在实现clone() 方法时直接调用了Object类的本地clone()方法造成的，因为Object的clone()方法执行的是浅拷贝，因此person2和person的hands都指向了同一个list实例，要想实现深拷贝，就必须修改clone方法。</p><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>修改Person类为如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hands;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHands</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hands;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHands</span><span class="params">(List&lt;String&gt; hands)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hands = hands;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Person <span class="title">clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> CloneNotSupportedException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String name=<span class="keyword">this</span>.name;</span><br><span class="line">        List&lt;String&gt; hands=<span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.hands);</span><br><span class="line">        Person person=<span class="keyword">new</span> Person();</span><br><span class="line">        person.setName(name);</span><br><span class="line">        person.setHands(hands);</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", hands="</span> + hands + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我在克隆方法中为每个元素创建了新的对象来实现拷贝。测试类运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person [name=男人, hands=[左手]]</span><br><span class="line">Person [name=男人, hands=[左手]]</span><br><span class="line">Person [name=男人, hands=[左手, 右手]]</span><br><span class="line">Person [name=女人, hands=[左手]]</span><br></pre></td></tr></table></figure></p><p><strong>深拷贝与浅拷贝问题中，会发生深拷贝的有java中的8中基本类型(char,byte,int,short,long,float,double,boolean)以及他们的封装类型，另外还有String类型。其余的都是浅拷贝。</strong><br><strong>代码在github，地址为</strong><a href="https://github.com/lijiao1026/DesignPatterns" target="_blank" rel="noopener">https://github.com/lijiao1026/DesignPatterns</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;p&gt;在开发过程中，有时会遇到为一个类创建多个实例的情况，这些实例内部成员往往完全相同或有细微的差异，而且实例的创建开销比较大或者需要输入较多参数
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java设计模式之建造者模式</title>
    <link href="http://yoursite.com/2018/05/02/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/05/02/Java设计模式之建造者模式/</id>
    <published>2018-05-02T01:48:43.000Z</published>
    <updated>2018-05-02T02:57:47.148Z</updated>
    
    <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>建造者模式是将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><h4 id="主要作用"><a href="#主要作用" class="headerlink" title="主要作用"></a>主要作用</h4><p>在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。</p><ol><li>用户只需要给出指定复杂对象的类型和内容</li><li>建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来)</li></ol><h4 id="包含角色"><a href="#包含角色" class="headerlink" title="包含角色"></a>包含角色</h4><ol><li>Builder：给出一个抽象接口，以规范产品对象的各个组成成分的建造。这个接口规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建。</li><li>ConcreteBuilder：实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建。 在建造过程完成后，提供产品的实例。</li><li>Director：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。</li><li>Product：要创建的复杂对象。</li></ol><h4 id="模式讲解"><a href="#模式讲解" class="headerlink" title="模式讲解"></a>模式讲解</h4><ol><li>指挥者（Director）直接和客户（Client）进行需求沟通。</li><li>沟通后指挥者将客户创建产品的需求划分为各个部件的建造请求（Builder）。</li><li>将各个部件的建造请求委派到具体的建造者（ConcreteBuilder）。</li><li>各个具体建造者负责进行产品部件的构建。</li><li>最终构建成具体产品（Product）。</li></ol><h4 id="实例讲解"><a href="#实例讲解" class="headerlink" title="实例讲解"></a>实例讲解</h4><p>接下来我还是用抽象工厂模式中使用的肯德基套餐的例子来讲解下，顺便让我们看看抽象工厂模式和建造者模式的区别。</p><ul><li>Product(要创建的负责对象，即套餐):套餐由主食，小食和饮料组成。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetMeal</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String  StapleFood;</span><br><span class="line">    <span class="keyword">private</span> String  Snack;</span><br><span class="line">    <span class="keyword">private</span> String  Drinks;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStapleFood</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StapleFood;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStapleFood</span><span class="params">(String stapleFood)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        StapleFood = stapleFood;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSnack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Snack;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSnack</span><span class="params">(String snack)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Snack = snack;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDrinks</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Drinks;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDrinks</span><span class="params">(String drinks)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Drinks = drinks;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Builder接口:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SetMealBuilder</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildStapleFood</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildSnack</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildDrinks</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">SetMeal <span class="title">buildSetMeal</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ConcreteBuilder：实现Builder接口，根据不同的商业逻辑，可以形成不同的套餐。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChickenBurgerBuilder</span> <span class="keyword">implements</span> <span class="title">SetMealBuilder</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    SetMeal setMeal;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">ChickenBurgerBuilder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        setMeal=<span class="keyword">new</span> SetMeal();<span class="comment">//创建一个套餐实例，用来调用set方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildStapleFood</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        setMeal.setStapleFood(<span class="string">"烹饪鸡腿汉堡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildSnack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       setMeal.setSnack(<span class="string">"烹饪薯条"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildDrinks</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       setMeal.setDrinks(<span class="string">"烹饪可乐"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SetMeal <span class="title">buildSetMeal</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> setMeal;<span class="comment">//返回一个套餐实例</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Director（调用具体建造者来创建负责对象，并且控制对象的创建顺序和部分）:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetMealDirector</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SetMeal <span class="title">constructBuilder</span><span class="params">(ChickenBurgerBuilder chickenBurgerBuilder)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        chickenBurgerBuilder.buildStapleFood();</span><br><span class="line">        chickenBurgerBuilder.buildSnack();</span><br><span class="line">        chickenBurgerBuilder.buildDrinks();</span><br><span class="line">        <span class="keyword">return</span> chickenBurgerBuilder.buildSetMeal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SetMealDirector setMealDirector=<span class="keyword">new</span> SetMealDirector();</span><br><span class="line">        SetMeal setMeal=setMealDirector.constructBuilder(<span class="keyword">new</span> ChickenBurgerBuilder());</span><br><span class="line">        System.out.println(setMeal.getStapleFood());</span><br><span class="line">        System.out.println(setMeal.getSnack());</span><br><span class="line">        System.out.println(setMeal.getDrinks());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="建造者模式与工厂模式的区别"><a href="#建造者模式与工厂模式的区别" class="headerlink" title="建造者模式与工厂模式的区别"></a>建造者模式与工厂模式的区别</h4><ol><li>工厂模式一般都是创建一个产品，注重的是把这个产品创建出来就行，只要创建出来，不关心这个产品的组成部分。从代码上看，工厂模式就是一个方法，用这个方法就能生产出产品。</li><li>建造者模式也是创建一个产品，但是不仅要把这个产品创建出来，还要关系这个产品的组成细节，组成过程。从代码上看，建造者模式在建造产品时，这个产品有很多方法，建造者模式会根据这些相同方法但是不同执行顺序建造出不同组成细节的产品。</li></ol><p><strong>代码在github，地址为</strong><a href="https://github.com/lijiao1026/DesignPatterns" target="_blank" rel="noopener">https://github.com/lijiao1026/DesignPatterns</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;p&gt;建造者模式是将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。&lt;/p&gt;
&lt;h4 id=&quot;主要作用&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java设计模式之单例模式</title>
    <link href="http://yoursite.com/2018/04/28/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/04/28/Java设计模式之单例模式/</id>
    <published>2018-04-28T01:29:55.000Z</published>
    <updated>2018-04-28T05:43:17.032Z</updated>
    
    <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，选择单例模式就是为了避免不一致状态，避免政出多头。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>单例类只能有一个实例。</li><li>单例类必须自己创建自己的唯一实例。</li><li>单例类必须给所有其他对象提供这一实例。</li></ol><p>单例模式的写法有好几种，这里主要使用的是：懒汉式单例，饿汉式单例。</p><h4 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HugryManSingletoMode</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HugryManSingletoMode</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">"饿汉式单例"</span>);&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HugryManSingletoMode hugryManSingletoMode=<span class="keyword">new</span> HugryManSingletoMode();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HugryManSingletoMode <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hugryManSingletoMode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        HugryManSingletoMode.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中我们看到，类的构造函数定义为private的，保证其他类不能实例化此类，然后提供了一个静态实例并返回给调用者。饿汉模式是最简单的一种实现方式，饿汉模式在类加载的时候就对实例进行创建，实例在整个程序周期都存在。它的好处是只在类加载的时候创建一次实例，不会存在多个线程创建多个实例的情况，避免了多线程同步的问题。它的缺点也很明显，即使这个单例没有用到也会被创建，而且在类加载之后就被创建，内存就被浪费了。<br>这种实现方式适合单例占用内存比较小，在初始化时就会被用到的情况。但是，如果单例占用的内存比较大，或单例只是在某个特定场景下才会用到，使用饿汉模式就不合适了，这时候就需要用到懒汉模式进行延迟加载。</p><h4 id="懒汉式单例"><a href="#懒汉式单例" class="headerlink" title="懒汉式单例"></a>懒汉式单例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlackerSingletonMode</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SlackerSingletonMode</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">"懒汉式单例"</span>);&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SlackerSingletonMode slackerSingletonMode=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SlackerSingletonMode <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (slackerSingletonMode==<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            slackerSingletonMode=<span class="keyword">new</span> SlackerSingletonMode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slackerSingletonMode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SlackerSingletonMode通过将构造方法限定为private避免了类在外部被实例化，在同一个虚拟机范围内，SlackerSingletonMode的唯一实例只能通过getInstance()方法访问。但是以上懒汉式单例的实现没有考虑线程安全问题，它是线程不安全的，并发环境下很可能出现多个Singleton实例，要实现线程安全，有以下三种方式，都是对getInstance这个方法改造，保证了懒汉式单例的线程安全。  </p><ul><li>在getInstance方法上加同步<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlackerSingletonMode</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SlackerSingletonMode</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">"懒汉式单例"</span>);&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SlackerSingletonMode slackerSingletonMode=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SlackerSingletonMode <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (slackerSingletonMode==<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            slackerSingletonMode=<span class="keyword">new</span> SlackerSingletonMode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slackerSingletonMode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在方法上加synchronized同步锁或是用同步代码块对类加同步锁，此种方式虽然解决了多个实例对象问题，但是该方式运行效率却很低下，下一个线程想要获取对象，就必须等待上一个线程释放锁之后，才可以继续运行。volatile的一个语义是禁止指令重排序优化（。所谓指令重排优化是指在不改变原语义的情况下，通过调整指令的执行顺序让程序运行的更快。JVM中并没有规定编译器优化相关的内容，也就是说JVM可以自由的进行指令重排序的优化。），也就保证了instance变量被赋值的时候对象已经是初始化过的。</p><ul><li>双重检查锁定<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlackerSingletonMode</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SlackerSingletonMode</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">"懒汉式单例"</span>);&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SlackerSingletonMode slackerSingletonMode=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  SlackerSingletonMode <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (slackerSingletonMode==<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SlackerSingletonMode.class)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (slackerSingletonMode==<span class="keyword">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    slackerSingletonMode=<span class="keyword">new</span> SlackerSingletonMode();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slackerSingletonMode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>可以看到上面在同步代码块外多了一层instance为空的判断。由于单例对象只需要创建一次，如果后面再次调用getInstance()只需要直接返回单例对象。因此，大部分情况下，调用getInstance()都不会执行到同步代码块，从而提高了程序性能。不过还需要考虑一种情况，假如两个线程A、B，A执行了if (instance == null)语句，它会认为单例对象没有创建，此时线程切到B也执行了同样的语句，B也认为单例对象没有创建，然后两个线程依次执行同步代码块，并分别创建了一个单例对象。为了解决这个问题，还需要在同步代码块中增加if (instance == null)语句。使用双重检查进一步做了优化，可以避免整个方法被锁，只对需要锁的代码部分加锁，可以提高执行效率。</p><ul><li>静态内部类实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlackerSingletonMode</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SlackerSingletonMode</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">"懒汉式单例"</span>);&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerObjct</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span>  <span class="keyword">static</span> SlackerSingletonMode slackerSingletonMode=<span class="keyword">new</span> SlackerSingletonMode();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SlackerSingletonMode <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerObjct.slackerSingletonMode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这种方式同样利用了类加载机制来保证只创建一个instance实例。它与饿汉模式一样，也是利用了类加载机制，因此不存在多线程并发的问题。不一样的是，它是在内部类里面去创建对象实例。这样的话，只要应用中不使用内部类，JVM就不会去加载这个单例类，也就不会创建单例对象，从而实现懒汉式的延迟加载。也就是说这种方式可以同时保证延迟加载和线程安全。</p><h4 id="饿汉式和懒汉式区别"><a href="#饿汉式和懒汉式区别" class="headerlink" title="饿汉式和懒汉式区别"></a>饿汉式和懒汉式区别</h4><p>从名字上来说，饿汉和懒汉，饿汉就是类一旦加载，就把单例初始化完成，保证getInstance的时候，单例是已经存在的了，而懒汉比较懒，只有当调用getInstance的时候，才回去初始化这个单例。</p><ol><li>线程安全:<br>饿汉式天生就是线程安全的，可以直接用于多线程而不会出现问题，<br>懒汉式本身是非线程安全的，为了实现线程安全有几种写法，分别是上面的1、2、3，这三种实现在资源加载和性能方面有些区别。</li><li>资源加载和性能：<br>饿汉式在类创建的同时就实例化一个静态对象出来，不管之后会不会使用这个单例，都会占据一定的内存，但是相应的，在第一次调用时速度也会更快，因为其资源已经初始化完成，而懒汉式顾名思义，会延迟加载，在第一次使用该单例的时候才会实例化对象出来，第一次调用时要做初始化，如果要做的工作比较多，性能上会有些延迟，之后就和饿汉式一样了。至于1、2、3这三种实现又有些区别，第1种，在方法调用上加了同步，虽然线程安全了，但是每次都要同步，会影响性能，毕竟99%的情况下是不需要同步的，第2种，在getInstance中做了两次null检查，确保了只有第一次调用单例的时候才会做同步，这样也是线程安全的，同时避免了每次都同步的性能损耗。第3种，利用了classloader的机制来保证初始化instance时只有一个线程，所以也是线程安全的，同时没有性能损耗，所以一般我倾向于使用这一种。</li></ol><p><strong>代码在github，地址为</strong><a href="https://github.com/lijiao1026/DesignPatterns" target="_blank" rel="noopener">https://github.com/lijiao1026/DesignPatterns</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;p&gt;单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java设计模式之工厂模式（简单工厂模式+工厂方法模式+抽象工厂模式）</title>
    <link href="http://yoursite.com/2018/04/25/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%88%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/25/Java设计模式之工厂模式（简单工厂模式-工厂方法模式-抽象工厂模式）/</id>
    <published>2018-04-25T07:48:07.000Z</published>
    <updated>2018-04-28T01:15:00.733Z</updated>
    
    <content type="html"><![CDATA[<p>在面向对象编程中, 最通常的方法是一个new操作符产生一个对象实例,new操作符就是用来构造对象实例的。但是在一些情况下, new操作符直接生成对象会带来一些问题。举例来说, 许多类型对象的创造需要一系列的步骤: 你可能需要计算或取得对象的初始设置; 选择生成哪个子对象实例; 或在生成你需要的对象之前必须先生成一些辅助功能的对象。 在这些情况,新对象的建立就是一个 “过程”，不仅是一个操作，像一部大机器中的一个齿轮传动。<br><strong>解决方案：建立一个工厂来创建对象</strong></p><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><ol><li>在很早以前还没有肯德基快餐，人们想吃汉堡需要自己动手制作，然后自己才可以吃到汉堡。</li><li>简单工厂模式：后来出现了肯德基。人们不需要自己去制作汉堡，因为只需要去肯德基就可以吃到美味的汉堡。</li><li>工厂方法模式时代：为了满足不同客户口味的不同，肯德基退出的汉堡种类越来越多，有劲爆鸡腿汉堡，巨无霸汉堡，深海鳕鱼汉堡等等。每个门点会有自己主打的汉堡品牌，即每个门店有自己的特色汉堡，我们可以去相应的门店迟到自己心仪的汉堡。</li><li>抽象工厂模式时代：随着客户的口味要求越来越高，汉堡还会搭配各种小食，于是各个门店又推出了不同的小食搭配。<br><strong>最终是客户只要对肯德基的的销售员说：我要鸡腿堡套餐，销售员就直接给他鸡腿堡加薯条和可乐。而不用自己去烹饪。</strong><br><strong>这就是工厂模式。</strong></li></ol><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>工厂模式可以分为3类，分别为简单工厂模式（Simple Factory），工厂方法模式（Factory Method），抽象工厂模式（Abstract Factory），这三种模式逐步抽象，并且更具一般性。可以简单工厂模式（Simple Factory）看为工厂方法模式的一种特例，两者归为一类。</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>工厂方法模式：<br>一个抽象产品类，可以派生出多个具体产品类。<br>一个抽象工厂类，可以派生出多个具体工厂类。<br>每个具体工厂类只能创建一个具体产品类的实例。<br>抽象工厂模式：<br>多个抽象产品类，每个抽象产品类可以派生出多个具体产品类。<br>一个抽象工厂类，可以派生出多个具体工厂类。<br>每个具体工厂类可以创建多个具体产品类的实例。<br>区别：<br>工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。<br>工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个。两者皆可。</p><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><p>客户想吃汉堡，客户和汉堡就紧密耦合在一起，为了降低耦合，就出现了工厂类，把烹饪汉堡的操作细节都放进了工厂里面去，客户直接使用工厂的创建方法，传入想要吃的汉堡类型就可以，这就是简单工厂模式。  </p><ul><li>产品类:  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Hanburger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hanburger</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChickenBurger</span> <span class="keyword">extends</span> <span class="title">Hanburger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">ChickenBurger</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"烹饪鸡腿汉堡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodHamburger</span> <span class="keyword">extends</span> <span class="title">Hanburger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">CodHamburger</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"烹饪鳕鱼汉堡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>工厂类:  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hanburger <span class="title">createHanburger</span><span class="params">(<span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ChickenBurger();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> CodHamburger();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>客户类:  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       Factory factory=<span class="keyword">new</span> Factory();</span><br><span class="line">       Hanburger chickenBurger=factory.createHanburger(<span class="number">1</span>);</span><br><span class="line">       Hanburger codHamburger=factory.createHanburger(<span class="number">2</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单工厂模式又称静态工厂方法模式。从命名上就可以看出这个模式很简单。他的目的就是:定义一个用于创建对象的接口。<br>先来看看他的组成:  </p><ol><li>工厂类角色:这是本模式的核心，含有一定的商业逻辑和判断逻辑，用来创建产品。</li><li>抽象产品角色:他一般是具体产品继承的父类或者实现的接口。</li><li>具体产品角色：工厂类所创建的对象就是此角色的实例。在java中由一个具体类实现。  </li></ol><p>从开闭原则（对扩展开发；对修改封闭）上来分析下简单工厂模式。当客户不满足现有的汉堡种类，想吃别的类型的汉堡，只要这种汉堡符合抽象产品的制定合同，那么只要通知工厂类就可以制造出来。所以对产品部分来说，他是符合开闭原则的；但是工厂部分好像不太理想，因为每增加一种汉堡，都要在工厂类中增加相应的创建业务逻辑即要新增case方法，这显然是违背开闭原则的。可想而知对于新产品的引入，工厂是非常被动的，对于这样的工厂类，我们称它为全能类或者上帝类。<br><strong>于是工厂方法模式出现了，他把工厂类定义成了接口，而新增的汉堡种类，就增加该种类的对应的工厂类的实现，这样工厂的设计就可以扩展了，而不必去修改原来的代码。</strong></p><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><p>工厂方法模式去掉了简单工厂模式中工厂方法的静态属性，使得他可以被子类继承。这样在简单工厂模式里集中在工厂方法上的压力可以由工厂方法模式里不同的工厂子类来分担。<br>工厂方法模式组成：</p><ol><li>抽象工厂角色：这是工厂方法模式的核心，他与应用程序无关，是具体工厂角色必须实现的接口或者必须继承的父类。在java中他由抽象类或者接口来实现。</li><li>具体工厂角色：他含有和具体业务逻辑有关的代码。由应用程序调用以创建对于的具体产品的对象。</li><li>抽象产品角色：他是具体产品继承的父类或者实现的接口。在java中一般有抽象类或者接口来实现。</li><li>具体产品角色：具体工厂角色所创建的对象就是此角色的实例。在java中由具体的类来实现。  </li></ol><p>工厂方法模式使用继承自抽象工厂角色的多个子类来代替简单工厂模式中的“上帝类”。正如上面所说，这样便分担了对象承受的压力；而且这样使得结构变得灵活 起来——当有新的产品产生时，只要按照抽象产品角色、抽象工厂角色提供的合同来生成，那么就可以被客户使用，而不必去修改任何已有 的代码。可以看出工厂角色的结构也是符合开闭原则的！ 代码只改动了工厂类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FactoryHanburger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function">Hanburger <span class="title">createHanburger</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryChickenBurger</span> <span class="keyword">implements</span> <span class="title">FactoryHanburger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChickenBurger <span class="title">createHanburger</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChickenBurger();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryCodHamburger</span> <span class="keyword">implements</span> <span class="title">FactoryHanburger</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CodHamburger <span class="title">createHanburger</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CodHamburger();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="comment">/*Factory factory=new Factory();</span></span><br><span class="line"><span class="comment">      Hanburger chickenBurger=factory.createHanburger(1);</span></span><br><span class="line"><span class="comment">      Hanburger codHamburger=factory.createHanburger(2); */</span></span><br><span class="line">      FactoryChickenBurger factoryChickenBurger=<span class="keyword">new</span> FactoryChickenBurger();</span><br><span class="line">      ChickenBurger chickenBurger=factoryChickenBurger.createHanburger();</span><br><span class="line">      FactoryCodHamburger factoryCodHamburger=<span class="keyword">new</span> FactoryCodHamburger();</span><br><span class="line">      CodHamburger codHamburger=factoryCodHamburger.createHanburger();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p> 工厂方法模式仿佛已经很完美的对对象的创建进行了包装，使得客户程序中仅仅处理抽象产品角色提供的接口，但使得对象的数量成倍增长。当产品种类非常多时，会出现大量的与之对应的工厂对象，这不是我们所希望的。</p><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p> 随着客户的要求越来越高，可能不简单会点汉堡一样食品，而是希望有一些经济的套餐，搭配上小食，饮料这样。于是便出现了鸡腿堡套餐（鸡腿汉堡+薯条+可乐），鳕鱼套餐（鳕鱼汉堡+鸡块+咖啡）。这就需要用到抽象工厂模式。抽象工厂模式是工厂方法模式的升级版本，他用来创建一组相关或者相互依赖的对象。<br> 当每个抽象产品都有多于一个的具体子类的时候（小食有薯条和鸡块两种，饮料也有可乐和咖啡两种），工厂角色怎么知道实例化哪一个子类呢？比如每个抽象产品角色都有两个具体产品。抽象工厂模式提供两个具体工厂角色，分别对应于这两个具体产品角色，每一个具体工厂角色只负责某一个产品角色的实例化。每一个具体工厂类只负责创建抽象产品的某一个具体子类的实例。</p><ul><li>产品类  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Drinks</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDrinks</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">implements</span> <span class="title">Drinks</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDrinks</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       System.err.println(<span class="string">"制造咖啡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cola</span> <span class="keyword">implements</span> <span class="title">Drinks</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDrinks</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"制造可乐"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Snack</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSnack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fries</span> <span class="keyword">implements</span> <span class="title">Snack</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSnack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"烹饪薯条"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChickenNugget</span> <span class="keyword">implements</span> <span class="title">Snack</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSnack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"烹饪鸡块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>工厂类：  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSnack</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDrinks</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChickBurgerSetMeal</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSnack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Fries().createSnack();;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDrinks</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Cola().createDrinks();;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodHamburgerSetMeal</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSnack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">new</span> ChickenNugget().createSnack();;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDrinks</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Coffee().createDrinks();;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>客户类：  </li></ul><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span><span class="class"></span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><span class="function">    </span>{        <span class="comment">//鸡腿堡套餐</span>        ChickBurgerSetMeal chickBurgerSetMeal=<span class="keyword">new</span> ChickBurgerSetMeal();        chickBurgerSetMeal.createSnack();        chickBurgerSetMeal.createDrinks();        <span class="comment">//鳕鱼套餐</span>        CodHamburgerSetMeal codHamburgerSetMeal=<span class="keyword">new</span> CodHamburgerSetMeal();        codHamburgerSetMeal.createSnack();        codHamburgerSetMeal.createDrinks();    }}</code></pre><h4 id="抽象工厂模式的优缺点"><a href="#抽象工厂模式的优缺点" class="headerlink" title="抽象工厂模式的优缺点"></a>抽象工厂模式的优缺点</h4><ol><li><p>优点：封装性。每个产品的实现类不是高层模块要关心的，它要关心的是接口，是抽象，它不关心对象是如何创建出来的，这都由工厂类负责的，只要知道工厂类是谁，我就能创建一个需要的对象，省时省力。产品族内的约束为非公开状态。例如生产男女比例的问题上，猜想女娲娘娘肯定有自己的打算，那么在抽象工厂模式中，这些约束都在工厂内里面实现的。</p></li><li><p>缺点: 抽象工厂模式最大的缺点就是产品族扩展非常困难。如果我们要增加一个产品C，也就是说产品族由原来的A和B增加到3个，然后两个实现类都要修改……说到这里，已经知道了扩展的弊端了……注意这里是产品族扩展比较困难，而不是产品等级扩展困难。产品等级扩展还是非常容易的，增加一个产品等级，只要增加一个工厂类负责新增加出来的产品生产任务即可。也就是说横向扩展容易，纵向扩展难。即增加套餐种类容易，增加每种套餐的部件内容难。  </p></li></ol><p><strong>代码在github，地址为</strong><a href="https://github.com/lijiao1026/DesignPatterns" target="_blank" rel="noopener">https://github.com/lijiao1026/DesignPatterns</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在面向对象编程中, 最通常的方法是一个new操作符产生一个对象实例,new操作符就是用来构造对象实例的。但是在一些情况下, new操作符直接生成对象会带来一些问题。举例来说, 许多类型对象的创造需要一系列的步骤: 你可能需要计算或取得对象的初始设置; 选择生成哪个子对象实例
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java的23种设计模式</title>
    <link href="http://yoursite.com/2018/04/25/java%E7%9A%8423%E4%B8%AD%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/04/25/java的23中设计模式/</id>
    <published>2018-04-25T01:44:48.000Z</published>
    <updated>2018-04-25T06:38:30.530Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JAVA的设计模式分为3大类"><a href="#JAVA的设计模式分为3大类" class="headerlink" title="JAVA的设计模式分为3大类"></a>JAVA的设计模式分为3大类</h3><ul><li>创建型模式（5种）:工厂方法模式，抽象工厂模式，单例模式，建造者模式，原型模式。</li><li>结构型模式（7种）：适配器模式，装饰器模式，代理模式，外观模式，桥接模式，组合模式，享元模式。</li><li>行为型模式（11种）：策略模式，模板方法模式，观察者模式，迭代子模式，责任链模式，命令模式，备忘录模式，状态模式，访问者模式，中介者模式，解释器模式。</li></ul><h3 id="设计模式的6大原则"><a href="#设计模式的6大原则" class="headerlink" title="设计模式的6大原则"></a>设计模式的6大原则</h3><ol><li>开闭原则（Open Close Principle）<br>开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果经常使用接口和抽象类。</li><li>里氏代换原则（Liskov Substitution Principle）<br>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。  </li><li>依赖倒转原则（Dependence Inversion Principle）<br>这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。</li><li>接口隔离原则（Interface Segregation Principle）<br>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</li><li>迪米特法则（最少知道原则）（Demeter Principle）<br>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</li><li>合成复用原则（Composite Reuse Principle）<br>原则是尽量使用合成/聚合的方式，而不是使用继承。继承实际上破坏了类的封装性，超类的方法可能会被子类修改。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JAVA的设计模式分为3大类&quot;&gt;&lt;a href=&quot;#JAVA的设计模式分为3大类&quot; class=&quot;headerlink&quot; title=&quot;JAVA的设计模式分为3大类&quot;&gt;&lt;/a&gt;JAVA的设计模式分为3大类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;创建型模式（5种）:工厂方法模式
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小知识点整理记录</title>
    <link href="http://yoursite.com/2018/04/11/%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/04/11/小知识点整理记录/</id>
    <published>2018-04-11T06:04:57.000Z</published>
    <updated>2018-04-16T12:09:00.181Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入我的生日</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      这是面试中遇到的自己不会的问题的答案
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Centos7安装oracle</title>
    <link href="http://yoursite.com/2018/03/19/Centos7%E5%AE%89%E8%A3%85oracle/"/>
    <id>http://yoursite.com/2018/03/19/Centos7安装oracle/</id>
    <published>2018-03-19T05:29:03.000Z</published>
    <updated>2018-04-03T07:29:50.594Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章介绍完了如何从零开始到安装好所有环境，但是数据库用的是oracle的话安装比较繁琐，所以另开一篇。</p><h1 id="系统准备"><a href="#系统准备" class="headerlink" title="系统准备"></a>系统准备</h1><p>oracle分我64位和32位的，本次使用的是64为的安装包，前往oracle官网即可下载到，分别为linux.x64_11gR2_database_1of2和linux.x64_11gR2_database_2of2。做完这些之后如果没有关闭防火墙和配置好固定ip请先看前面文章配置。  </p><h1 id="用户和环境准备"><a href="#用户和环境准备" class="headerlink" title="用户和环境准备"></a>用户和环境准备</h1><ol><li><p>安装依赖包，执行命令:yum -y install gcc gcc-c++ make binutilscompat-libstdc++-33 elfutils-libelf elfutillibelf-devel glibc glibcommonglibc-devel libaio libaio-devel libgcclibstdc++ libstdc++-devel unixODBC unixODBC-devel </p></li><li><p>创建用户和组。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# sysctl -p</span><br><span class="line">[root@localhost ~]# groupadd -g 200 oinstall</span><br><span class="line">[root@localhost ~]# groupadd -g 201 dba</span><br><span class="line">[root@localhost ~]# useradd -u 440 -g oinstall -G dba oracle</span><br><span class="line">[root@localhost ~]# passwd oracle</span><br></pre></td></tr></table></figure></li><li><p>修改内核参数。执行命令:<code>vim /etc/sysctl.conf</code>，在末尾添加如下信息。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_local_port_range= 9000 65500</span><br><span class="line">fs.file-max = 6815744 </span><br><span class="line">kernel.shmall = 10523004</span><br><span class="line">kernel.shmmax = 6465333657</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100128</span><br><span class="line">net.core.rmem_default=262144</span><br><span class="line">net.core.wmem_default=262144</span><br><span class="line">net.core.rmem_max=4194304</span><br><span class="line">net.core.wmem_max=1048576</span><br><span class="line">fs.aio-max-nr = 1048576</span><br></pre></td></tr></table></figure></li><li><p>修改系统资源限制。执行命令: <code>vim /etc/security/limits.conf</code> ，末尾添加如下:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oracle soft nproc 2047 </span><br><span class="line">oracle hard nproc 16384</span><br><span class="line">oracle soft nofile 1024 </span><br><span class="line">oracle hard nofile 655</span><br></pre></td></tr></table></figure></li><li><p>在执行命令:<code>vi/etc/pam.d/login</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session required pam_namespace.so #下面添加一条pam_limits.so </span><br><span class="line">session required pam_limits.so</span><br></pre></td></tr></table></figure></li><li><p>在执行命令:<code>vi/etc/profile</code> 添加如下  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$USER</span> =<span class="string">"oracle"</span> ]; <span class="keyword">then</span></span><br><span class="line"> <span class="keyword">if</span> [ <span class="variable">$SHELL</span> = <span class="string">"/bin/ksh"</span> ];<span class="keyword">then</span></span><br><span class="line"> <span class="built_in">ulimit</span> -p 16384</span><br><span class="line"> <span class="built_in">ulimit</span> -n 65536</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="built_in">ulimit</span> -u 16384 -n 65536</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li><p>创建安装目录及设置权限，命令行输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# mkdir /opt/oracle</span><br><span class="line">[root@localhost opt]# mkdir /opt/oracle/app</span><br><span class="line">[root@localhost opt]# mkdir /opt/oracle/oradata</span><br><span class="line">[root@localhost opt]# chmod 755 /opt/oracle</span><br><span class="line">[root@localhost opt]# chmod 755 /opt/oracle/app</span><br><span class="line">[root@localhost opt]# chown oracle.oinstall -R /opt/oracle</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量。先切换到oracle用户，执行命令<code>su oracle</code>,然后执行命令<code>vi ~/.bash_profile</code>,加入如下内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export ORACLE_BASE=/opt/oracle/app</span><br><span class="line">export ORACLE_HOME=$ORACLE_BASE/product/11.2.0/dbhome_1</span><br><span class="line">export PATH=$PATH:$ORACLE_HOME/bin</span><br><span class="line">export ORACLE_SID=orcl</span><br><span class="line">export ORACLE_PID=orcl</span><br></pre></td></tr></table></figure></li><li><p>再执行命令:<code>source .bash_profile</code>立即生效。如果提示没有权限的话，使用sudo执行。</p></li><li>将已经下载好的两个oracle压缩文件复制到/media文件夹里面。然后解压文件，执行命令:<code>unzip /media/linux.x64_11gR2_database_1of2.zip</code>和<code>unzip /media/linux.x64_11gR2_database_2of2.zip</code>，解压完后执行命令<code>xhost +</code>开启图形化桌面，如果不能执行，就先执行命令:<code>export DISPLAL=:0</code>再执行刚才的命令。  </li><li>切换到oracle用户，<code>su oracle</code>，然后切换到/media/database目录下，先执行<code>export LANG=EN</code>切换为安装的时候英文,执行<code>./runInstall</code>  </li></ol><h1 id="图形化界面安装"><a href="#图形化界面安装" class="headerlink" title="图形化界面安装"></a>图形化界面安装</h1><ol><li>不要输入email，直接next<br><img src="/images/Oracle/oracle1.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>选择安装数据库软件并创建数据，也可以选择第二项仅安装数据库软件，然后next。<br><img src="/images/Oracle/oracle2.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>选择服务器版本，如图，点击next。<br><img src="/images/Oracle/oracle3.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>单例数据库，如图，点击next。<br><img src="/images/Oracle/oracle4.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>高级模式安装，如图，点击next。<br><img src="/images/Oracle/oracle5.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>添加支持语言，如图，点击next。<br><img src="/images/Oracle/oracle6.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>选择要安装的版本，如图，点击next。<br><img src="/images/Oracle/oracle7.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>安装数据库目录，如图，点击next。<br><img src="/images/Oracle/oracle8.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>创建详细目录。<br><img src="/images/Oracle/oracle9.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>选择配置类型。<br><img src="/images/Oracle/oracle10.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>数据库与服务名。<br><img src="/images/Oracle/oracle11.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>开启自动内存管理（如果512m太大，会出现提示，减少一些就可以），然后先不要点击next，而是点击Memory旁边的Charactor sets选项。<br><img src="/images/Oracle/oracle12.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>设置默认编码为UTF-8。<br><img src="/images/Oracle/oracle13.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>启用oracle企业管理控制台OEM。<br><img src="/images/Oracle/oracle14.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>选择数据库文件目录。<br><img src="/images/Oracle/oracle15.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>自动备份。<br><img src="/images/Oracle/oracle16.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>设置数据库用户名和密码，他是有一个密码建议的，否则会提示错误，密码建议是包含大写和小写字母，总长度不能低于8位。<br><img src="/images/Oracle/oracle17.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>授权的组。<br><img src="/images/Oracle/oracle18.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>检查oracle一些安装要求，包都已经安装，直接忽略。<br><img src="/images/Oracle/oracle19.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>开始安装。<br><img src="/images/Oracle/oracle20.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li><p>安装完成后，会出来一个对话框，提示使用root用户执行这两个脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]$ /opt/oracle/oraInventory/orainstRoot.sh</span><br><span class="line">[root@localhost ~]$ /opt/oracle/app/product/11.2.0/dbhome_1/root.</span><br></pre></td></tr></table></figure></li><li><p>启动数据库。执行命令如下，如果没有配置好环境变量，将会无法启动！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@oracledb ~]# su –oracle</span><br><span class="line">[oracle@oracledb ~]# lsnrctl start</span><br><span class="line">[oracle@oracledb ~]# sqlplus / as sys</span><br></pre></td></tr></table></figure></li><li><p>设置oracle开机启动。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.键入命令“vi /etc/oratab”（使用vi编辑器编辑文件/etc/oratab）</span><br><span class="line">2.进入vi编辑器后，找到“orcl:/opt/oracle/app/product/11.2.0/dbhome_1:N”，改为“orcl:/opt/oracle/app/product/11.2.0/dbhome_1:Y”。修改完成后，保存退出vi。</span><br><span class="line">3.键入命令 vi /etc/rc.d/rc.local</span><br><span class="line">4.在vi编辑器中，添加：</span><br><span class="line">su oracle -lc &quot;/opt/oracle/app/product/11.2.0/dbhome_1/bin/lsnrctl start&quot;</span><br><span class="line">su oracle -lc /opt/oracle/app/product/11.2.0/dbhome_1/bin/dbstart</span><br><span class="line">5.保存并退出vi。</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上篇文章介绍完了如何从零开始到安装好所有环境，但是数据库用的是oracle的话安装比较繁琐，所以另开一篇。&lt;/p&gt;
&lt;h1 id=&quot;系统准备&quot;&gt;&lt;a href=&quot;#系统准备&quot; class=&quot;headerlink&quot; title=&quot;系统准备&quot;&gt;&lt;/a&gt;系统准备&lt;/h1&gt;&lt;p&gt;o
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux从零到成功部署项目</title>
    <link href="http://yoursite.com/2018/03/19/Linux%E4%BB%8E%E9%9B%B6%E5%88%B0%E6%88%90%E5%8A%9F%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2018/03/19/Linux从零到成功部署项目/</id>
    <published>2018-03-19T01:20:21.000Z</published>
    <updated>2018-03-20T01:16:42.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>上篇文章写完了如何将新机安装成linux7.4系统，这篇将写完禁用防火墙，开启SSH服务，开启VNC服务，安装JDK，安装TOMCAT。  </p><h1 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h1><ol><li>查看 SELinux 状态：/usr/sbin/sestatus -v<br><img src="/images/CentosAfterImage/SelinuxState.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li><p>临时关闭（不用重启机器）:这种方法重启后就失效，而且关闭后很多服务还是没法使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# setenforce 0 #设置 SELinux 成为 permissive 模式 </span><br><span class="line">[root@localhost ~]# setenforce 1 #设置 SELinux 成为 enforcing 模式</span><br></pre></td></tr></table></figure></li><li><p>永久关闭:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/selinux/conf</span><br></pre></td></tr></table></figure></li><li><p>将 SELINUX=enforcing 改为 SELINUX=disable,（按键盘字母 a，启用编辑，修改后按 esc，输入“：wq”，表示保存修改）如图，然后重启机器，执行命令reboot。<br><img src="/images/CentosAfterImage/CloseSelinux.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </p></li><li>Firewalld关闭，输入命令:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# systemctl stop firewalld.service 关闭防火墙</span><br><span class="line">[root@localhost ~]# systemctl disable firewalld.service 禁止防火墙开机启动</span><br></pre></td></tr></table></figure></li></ol><h1 id="SSH服务"><a href="#SSH服务" class="headerlink" title="SSH服务"></a>SSH服务</h1><ol><li><p>输入命令，查看SSH服务是否安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rpm -qa | grep ssh</span><br></pre></td></tr></table></figure></li><li><p>如果出现如图所示，就说明已经安装了SSH服务。<br><img src="/images/CentosAfterImage/SSHDownload.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </p></li><li>如果没有的话，执行命令yum install openssh-server 安装。  </li><li>启动SSH服务，执行命令:service sshd restart 重启 SSH 服务,出现如下：Redirecting to /bin/systemctl restart sshd.service。注：命令：service sshd start 启动服务 | 命令：service sshd stop 停止服务重启后可输入：netstat -antp | grep sshd 查看是否启动 22 端口。</li><li>设置开机自启动。输入命令：chkconfig sshd on。注：若是 chkconfig sshd off 则禁止 SSH 开机启动。  </li></ol><h1 id="安装lrzsz上传下载程序"><a href="#安装lrzsz上传下载程序" class="headerlink" title="安装lrzsz上传下载程序"></a>安装lrzsz上传下载程序</h1><ol><li><p>检查是否安装lrzsz,输入命令rpm -qa |grep lrzsz<br><img src="/images/CentosAfterImage/lrzszDownload.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>显示已经系统自带这款软件。假如没有安装，则输入命令安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum install -y lrzsz</span><br></pre></td></tr></table></figure></li><li><p>上传，从 Windows 上传文件，上传命令为 rz；在 Linux 命令行下输入 rz，上传的文件在当前命令行的目录下。  </p></li><li>下载。<code>[root@localhost ~]# sz 文件名</code>  </li></ol><h1 id="VNC远程服务"><a href="#VNC远程服务" class="headerlink" title="VNC远程服务"></a>VNC远程服务</h1><ol><li><p>检查 VNC 远程包是否安装，输入命令:<code>[root@localhost ~]# rpm -q tigervnctigervnc-server</code>出现如下提示：<br><code>未安装软件包 tigervnctigervnc-server</code><br>再输入：<code>[root@localhost ~]# rpm -qa |grep vnc</code>出现如下提示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tigervnc-license-1.8.0-1.el7.noarch</span><br><span class="line">tigervnc-server-minimal-1.8.0-1.el7.x86_64</span><br><span class="line">gvnc-0.7.0-2.el7.x86_64</span><br><span class="line">gtk-vnc2-0.7.0-2.el7.x86</span><br></pre></td></tr></table></figure></li><li><p>提示中看出发现少一个 tigervnc-server 安装包没有安装，执行命令<code>[root@localhost ~]# yum install –y tigervnc tigervnc-server</code>遇到询问都输入 y，然后回车。直至安装完成。  </p></li><li>启用vncserver服务，<code>[root@localhost ~]# vncserver</code>,会跳出提示要求你设置密码，自己输入密码就行。设置好后就能尝试登陆，VNC 默认端口是 5901  </li><li>开启VNC，尝试登录。<br><img src="/images/CentosAfterImage/VNCServer.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>另外 VNC 设置开机自启动，无论实在 centos6.7 版本或者 7.4 版本都不成功，所以每次都是设置 ssh 自启动后，链接 ssh 然后输入命令：<code>[root@localhost bin]# vncserver</code>  </li></ol><h1 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h1><ol><li>查看软件包，输入命令:<code>[root@localhost network-scripts]# rpm -qa | grep java</code><br><img src="/images/CentosAfterImage/JAVAPackage.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>一般 centos 都会默认安装 jdk，但我们这里要使用自己的 jdk，所以卸载掉系统自带的 jdk。输入卸载命令:<br><img src="/images/CentosAfterImage/UninstallJava.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>卸载完成后再次输入:<code>[root@localhost network-scripts]# rpm -qa | grep java</code>查看是否还存在java软件包。  </li><li>安装JDK<br>上传新的 jdk-7-linux-x64.rpm 软件到/usr/local/执行以下操作:<br><code>[root@localhost local]# rpm -ivh jdk-7u79-linux-x64.rpm</code>,进行 rpm 安装包的安装。<br><img src="/images/CentosAfterImage/JAVAInstall.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>输入java -version，查看版本。<br><img src="/images/CentosAfterImage/JAVAVersion.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li></ol><h1 id="安装TOMCAT"><a href="#安装TOMCAT" class="headerlink" title="安装TOMCAT"></a>安装TOMCAT</h1><ol><li><p>上传安装包。将 apache-tomcat-7.0.73.tar.gz 文件上传到/usr/local 。执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost local]# tar -zxv -f apache-tomcat-7.0.73.tar.gz // 解压压缩包 </span><br><span class="line">[root@localhost local]#rm -rf apache-tomcat-7.0.73.tar.gz // 删除压缩包 </span><br><span class="line">[root@localhost local]# mv apache-tomcat-7.0.73 tomcat //修改</span><br></pre></td></tr></table></figure></li><li><p>进入 tomcat/bin 目录，输入命令，开启 tomcat。<code>[root@localhost bin]# ./startup.sh</code>然后打开浏览器，访问 <a href="http://IP" target="_blank" rel="noopener">http://IP</a> 地址:端口号（默认 8080),出现 tomcat 主页面既表示安装成功。<br><img src="/images/CentosAfterImage/TOMCATStartup.jpg" width="600px" height="500px" alt="图片飞到火星去了"> </p></li><li>关闭 tomcat 命令则进入/tomcat/bin 目录，输入:<code>./shutdown.sh</code></li><li>修改tomcat内存配置。先关闭tomcat，修改内存大小：打开 tomcat/bin/catalina.sh找到 cygwin=false，在上面添加:<br><code>export JAVA_OPTS=&quot;-Xms1024m -Xmx1024m -XX:PermSize=128m -XX:MaxPermSize=256m&quot;</code><br><img src="/images/CentosAfterImage/JAVAJVM.jpg" width="600px" height="500px" alt="图片飞到火星去了"></li><li>注：-Xms128m JVM 初始分配的堆内<br>-Xmx512m JVM 最大允许分配的堆内存，按需分配<br>-XX:PermSize=64M JVM 初始分配的非堆内存<br>-XX:MaxPermSize=128M JVM 最大允许分配的非堆内存，按需分配  </li><li>修改tomcat字符集，tomcat 下的 conf 文件夹，打开 server.xml 文件,找到如下内容：  <pre><code>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot;/&gt;</code></pre>在 redirectPort=”8443”后面加上 URIEncoding=”utf-8”。<br><img src="/images/CentosAfterImage/TOMCATUtf8.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>配置tomcat开机启动，打开/etc/rc.d/rc.local 键入： /usr/local/tomcat/bin/startup.sh。<br><img src="/images/CentosAfterImage/TOMCATStart.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>保存并且退出。打开 tomcat 服务，重启电脑，尝试访问 tomcat 服务器。这时候发现曾经在 centos6.7 可以开机自启动 tomcat，在 centos7.4居然就不行。这是因为rc.local没有执行权限，执行命令<code>chmod +x /etc/rc.d/rc.local</code>重启后发现可以了。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h1&gt;&lt;p&gt;上篇文章写完了如何将新机安装成linux7.4系统，这篇将写完禁用防火墙，开启SSH服务，开启VNC服务，安装JDK，安装TOMCAT。  
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux安装Centos7.0</title>
    <link href="http://yoursite.com/2018/03/16/Linux%E5%AE%89%E8%A3%85Centous7-0/"/>
    <id>http://yoursite.com/2018/03/16/Linux安装Centous7-0/</id>
    <published>2018-03-16T05:28:11.000Z</published>
    <updated>2018-03-16T07:24:48.751Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备系统"><a href="#准备系统" class="headerlink" title="准备系统"></a>准备系统</h1><ol><li>准备一个8G以上的U盘  </li><li>访问：<a href="https://www.centos.or" target="_blank" rel="noopener">https://www.centos.or</a><br><img src="/images/CentosImage/CentosWeb.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>点击 Get Centos Now,跳出页面后选择DVD ISO<br><img src="/images/CentosImage/CentosDVD.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>从 Actual Country 中选择镜像网址下载:一般选择：<a href="http://centos.ustc.edu.cn/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1708.iso" target="_blank" rel="noopener">http://centos.ustc.edu.cn/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1708.iso</a>  </li><li>下载软件：USBWriter，网址<a href="https://sourceforge.net/projects/usbwrite" target="_blank" rel="noopener">https://sourceforge.net/projects/usbwrite</a> 下载完后打开软件，将 Centos 制作成 U 盘启动盘<br><img src="/images/CentosImage/CentosUsbWriter.jpg" width="600px" height="500px" alt="图片飞到火星去了">  <h1 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h1></li><li>更改 bios 启动顺序，开机后一直按F12或者F10，即可进入bios界面（即 U 盘先启动）  </li><li>进入安装界面<br><img src="/images/CentosImage/CentosLogin.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>界面说明：Install CentOS 7安装 CentOS 7（选择此项进入安装）<br>Test this media &amp; install CentOS 7 测试安装文件并安装<br>CentOS 7Troubleshooting 修复  </li><li>进入后进入安装语言选择界面:选择中文，这个默认指的是安装时候语言而不是系统语言。<br><img src="/images/CentosImage/CentosChinese.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>软件选择默认最小化安装，改成 GNOME。<br><img src="/images/CentosImage/CentosGNOME.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>安装位置点击进入如下图所示<br><img src="/images/CentosImage/CentosFenqu.jpg" width="600px" height="500px" alt="图片飞到火星去了"><br>根据实际情况选择要安装的目的地磁盘，图片上是安装在 40G 的一个硬盘中，选择我要配置分区  </li><li>进入后我选择的是分区方案 LVM，然后点击“点这里自动创建。记得删除下面的系统原有的分区。<br><img src="/images/CentosImage/CentosFenqu2.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>根据需求调整分区大小，一般 swap 是内存的 2 倍，最大别超过 16G。/boot 是用于一些配置启动文件，一般 500MB-1G 就足够。/一般配置150G-200G,/home 用于存放数据，配置完后点击完成。所有都修改好后点击下一步。系统会进入准备安装界面。<br><img src="/images/CentosImage/CentosFenpei.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>安装界面可以设置 root 密码和创建用户密码。填好后接下来就是等待安装，直至完成，会出现重启按钮。点击重启。<br><img src="/images/CentosImage/CentosAnzhuang.jpg" width="600px" height="500px" alt="图片飞到火星去了">  </li><li>重启后进入欢迎界面，记得拔下U盘，同意许可信息后就进入正式页面，可以使用了。建议先创建用户，和配置好网络，固定好ip。打开终端，查看安装的 centos 版本  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/redhat-releaseCentOS </span><br><span class="line">Linux release 7.4.1708 (Core)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;准备系统&quot;&gt;&lt;a href=&quot;#准备系统&quot; class=&quot;headerlink&quot; title=&quot;准备系统&quot;&gt;&lt;/a&gt;准备系统&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;准备一个8G以上的U盘  &lt;/li&gt;
&lt;li&gt;访问：&lt;a href=&quot;https://www.centos.or
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Markdown使用记录</title>
    <link href="http://yoursite.com/2018/03/01/article-title/"/>
    <id>http://yoursite.com/2018/03/01/article-title/</id>
    <published>2018-03-01T01:11:30.000Z</published>
    <updated>2018-03-02T08:20:46.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记markdown用法"><a href="#记markdown用法" class="headerlink" title="记markdown用法"></a>记markdown用法</h1><p>第一次使用markdown来写博客，想着既然要用这种语言来写，为了学习和记录用法，不如自己边写下用的过程。在学习中测试并且记录下来以便日后写博客的时候可以使用。<br>注意:Markdown使用<code>#</code>、<code>+</code>、<code>*</code>等符号来标记， 符号后面必须跟上 至少1个 空格才有效！换行的快捷键为2个空格在回车。 </p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><ol><li><p>在标题开头加上1~6个#，分别代表1级~6级标题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li><li><p>在<strong><em> 标题下方 </em></strong> 加上任意个<code>=</code>代表1级标题，加上任意个<code>-</code>代表2级标题。  </p></li></ol><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>引用以<code>&gt;</code>来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用 //&gt;后跟一个空格</span><br><span class="line">&gt;     代码块引用，&gt;后面跟5个空格。</span><br></pre></td></tr></table></figure><p>演示</p><blockquote><p>引用  </p></blockquote><blockquote><pre><code>代码块引用  </code></pre></blockquote><h1 id="行内标记"><a href="#行内标记" class="headerlink" title="行内标记"></a>行内标记</h1><p><div>利用`标记可以让代码变成一行</div><br>代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标记`hellow world`</span><br></pre></td></tr></table></figure></p><p>效果：  </p><p>标记<code>hellow world</code>  </p><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p><strong><em> 注意:必须与上一行距离一个空行 </em></strong>  ，代码块的结束必须要直接回车，如果使用2个空格加回车的方法的话会导致认为代码块仍然是继续的。</p><ol><li>普通代码块利用(```)   </li><li>将语言放在代码块之前来标记（自定义语法）<br>代码:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">```javascript</span><br><span class="line">var boy=10;</span><br><span class="line">var gril=11;</span><br><span class="line">var total=boy+gril;</span><br><span class="line">```</span><br></pre></td></tr></table></figure></li></ol><p>效果:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boy=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> gril=<span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> total=boy+gril;</span><br></pre></td></tr></table></figure></p><h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><p>两个<code>*</code>或<code>-</code>代表加粗，一个<code>*</code>或<code>-</code>代表斜体，<code>~~</code>代表删除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**加粗文本** 或者 __加粗文本__</span><br><span class="line"></span><br><span class="line">*斜体文本*  或者_斜体文本_</span><br><span class="line"></span><br><span class="line">~~删除文本~~</span><br></pre></td></tr></table></figure></p><p>效果: </p><p><strong>加粗文本</strong> 或者 <strong>加粗文本</strong></p><p><em>斜体文本</em>  或者<em>斜体文本</em></p><p><del>删除文本</del>  </p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>无序列表使用星号、加号或是减号作为列表标记：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* Red</span><br><span class="line">* Green</span><br><span class="line">* Blue</span><br></pre></td></tr></table></figure></p><p>效果:</p><ul><li>Red</li><li>Green</li><li>Blue  </li></ul><p>有序列表则使用数字接着一个英文句点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.  Bird</span><br><span class="line">2.  McHale</span><br><span class="line">3.  Parish</span><br></pre></td></tr></table></figure></p><p>效果: </p><ol><li>Bird</li><li>McHale</li><li>Parish  </li></ol><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* * *</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure></p><hr><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。<br>行内式的图片语法看起来像是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![Alt text](/path/to/img.jpg)</span><br><span class="line"></span><br><span class="line">![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</span><br></pre></td></tr></table></figure></p><p>详细叙述如下：  </p><ul><li>一个惊叹号 <code>!</code></li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。  </li></ul><p>参考式的图片语法则长得像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![Alt text][id]</span><br></pre></td></tr></table></figure></p><p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[id]: url/to/image  &quot;Optional title attribute&quot;</span><br></pre></td></tr></table></figure></p><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的img HTML标签。<br><img src="/images/MarkdownImage/test.jpg" width="600px" height="500px" alt="图片飞到火星去了"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;记markdown用法&quot;&gt;&lt;a href=&quot;#记markdown用法&quot; class=&quot;headerlink&quot; title=&quot;记markdown用法&quot;&gt;&lt;/a&gt;记markdown用法&lt;/h1&gt;&lt;p&gt;第一次使用markdown来写博客，想着既然要用这种语言来写，为了学
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/02/28/hello-world/"/>
    <id>http://yoursite.com/2018/02/28/hello-world/</id>
    <published>2018-02-28T08:16:00.000Z</published>
    <updated>2018-03-01T05:16:30.753Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
